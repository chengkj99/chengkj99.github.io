{"meta":{"title":"程是非sky","subtitle":"但行好事 莫问前程","description":"一边奔跑 一边思考","author":"程康健","url":"http://www.chengkangjian.com"},"pages":[{"title":"关于我","date":"2016-09-04T05:24:18.000Z","updated":"2017-11-20T09:54:11.000Z","comments":true,"path":"about/index.html","permalink":"http://www.chengkangjian.com/about/index.html","excerpt":"","text":"网名：程是非sky 必须让自己内心丰富 才能摆脱那些表面上的相似 …"},{"title":"归档","date":"2019-01-24T16:29:06.444Z","updated":"2017-02-14T10:12:09.000Z","comments":true,"path":"archive/index.html","permalink":"http://www.chengkangjian.com/archive/index.html","excerpt":"","text":""},{"title":"categories","date":"2016-09-04T05:20:57.000Z","updated":"2017-02-05T07:24:26.000Z","comments":false,"path":"categories/index.html","permalink":"http://www.chengkangjian.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2016-09-04T05:18:59.000Z","updated":"2017-02-05T07:24:26.000Z","comments":false,"path":"tags/index.html","permalink":"http://www.chengkangjian.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"人生中第一个乌龙球","slug":"oolong-ball","date":"2019-05-16T07:19:07.000Z","updated":"2019-05-16T12:17:04.377Z","comments":true,"path":"2019/05/16/oolong-ball/","link":"","permalink":"http://www.chengkangjian.com/2019/05/16/oolong-ball/","excerpt":"","text":"记得小学课本中有一段话说过: 第一次真好，第一次的感觉就是奇妙，生命中的第一次越多，生命越多姿多彩。这段话我背诵的很熟，以至于课文标题记不清了，这段还记忆深刻。 我的人生经历了很多第一次，比如: 第一次醉酒第一次坐飞机第一次写检讨书第一次穿越沙漠… 每一个第一次的背后，都是一个故事。有些第一次是美好的，有些第一次是令人遗憾的，经历过一个每一个第一次，都给我的心理历程图描绘了一笔。 今天，我又经历了一个第一次。万万没想到。 我在电视前看到过无数次球员或守门员进了乌龙球，每次看到他们失落的表情，作为旁观者，我更多的是无感和有一点点的同情，但是做不到真正的感同身受。今天是旷视参加的中关村缤纷足球运动会的关键战役，只有赢球才能出现。在这样关键的比赛中，因为自己的一个乌龙导致平局，我的心情五味杂陈。 我在赛前怎么也没想到会有乌龙。今天的乌龙产生于自己的头球，自己的头球本来就是不稳的，在那个门前右前方关键的位置应该用最有把握的方式解围，我不知道当时是怎么想的，虽然头球是合理的方式，只是没有注意到背后的大门。 然后，就是蓝瘦香菇了… 有时候人生的第一次就是这样的不经意间突然出现，究其原因，我想以后在重要的情景下，犯错成本很高的情况下，要用最稳妥的办法去解决问题，不要有侥幸心理，因为一旦犯错很有可能没有机会重新再来。","categories":[],"tags":[{"name":"生活","slug":"生活","permalink":"http://www.chengkangjian.com/tags/生活/"}]},{"title":"关于写代码的那点思考","slug":"code-and-startup","date":"2019-04-28T07:40:16.000Z","updated":"2019-05-10T02:18:42.363Z","comments":true,"path":"2019/04/28/code-and-startup/","link":"","permalink":"http://www.chengkangjian.com/2019/04/28/code-and-startup/","excerpt":"","text":"创业和用代码实现一个产品的过程很像，在第一次实现一个功能或产品的时候，都是紧张的、兴奋的、心里没底的，但是遇到问题的时候总会去网上搜索，去询问…去想尽一切办法去实现。 当完成了三次功能实现后，就轻车熟路了，发现也不过如此了，这个时候就到了自己的舒适区，此时到了瓶颈期。 为了不断的成长，此时需要继续探索提高效率的方法，探索新技术、新方案改进生产方式，一方面提高生产效率，一方面提高生产品质，达到客户（合作伙伴，领导等）的满意，用表现获得回报。 随着编程经验和技术的增长，有能力的程序员，去造优质轮子，发明新技术、新方案去影响某一个行业的技术发展或技术更新，这种工程师是技术大神了，也相当于创业公司成为为平台级的公司了，类似于程序员发明一个前端的开发框架，或者创造一个腾讯这样的平台级公司。 如此反复，去进一步接受更大的挑战，去获得更大的回报…","categories":[],"tags":[{"name":"思考","slug":"思考","permalink":"http://www.chengkangjian.com/tags/思考/"}]},{"title":"关于代码的那点思考","slug":"with-code","date":"2019-04-15T10:42:51.000Z","updated":"2019-05-10T02:18:42.366Z","comments":true,"path":"2019/04/15/with-code/","link":"","permalink":"http://www.chengkangjian.com/2019/04/15/with-code/","excerpt":"","text":"有一段时间认为，写代码是和机器打交道，写久了会忘记如何与人打交道。现在的想法有点改变了：你必须对你的代码实在，用心，这样代码才能够很好的运行，你也不用为改 bug 而烦恼，就像是对身边的人一样如此。","categories":[],"tags":[{"name":"思考","slug":"思考","permalink":"http://www.chengkangjian.com/tags/思考/"}]},{"title":"观 2019 歌手有感","slug":"singer","date":"2019-04-13T14:31:20.000Z","updated":"2019-06-13T07:13:22.901Z","comments":true,"path":"2019/04/13/singer/","link":"","permalink":"http://www.chengkangjian.com/2019/04/13/singer/","excerpt":"","text":"看了 2019 季的 「歌手」，很感动。我最喜欢的是龚琳娜和刘欢的作品。龚琳娜的作品将传统的文化与流行融合，让人赏心悦目，龚琳娜真的是一个艺术家，每一个作品都令我感到震撼。另外一个是刘欢，刘欢的歌格局高，上档次，还能深入人心。尤其最后的一首「甄嬛」，颇有意义，虽然刘欢刚做完手术，听着他喘着粗气完成「甄嬛」这首作品，真是令人敬仰和尊重的艺术家，刘欢是用生命在唱歌。而且他带着姚贝娜的天堂的歌声在总决赛演出，让我感动到不由自主的潸然泪下。 姚贝娜是我非常喜欢的一个歌手，作为一个不会唱歌但是喜欢听歌的音乐爱好者，在听到姚贝娜离开这个世界的消息时宛如自己的亲人离开了自己一样，那个时候我还是上大学，在学校宿舍的床上，夜里听着姚贝娜的歌，默默的，边听边哭，我作为一个男生，我也不想哭，实在忍不住。就像当时我在网易的 lofter 表达的那样：天机算不尽，交织悲与欢，对她的离开很痛心。她的歌在我的网易云里，每次听的时候仿佛她依然活在这个世界上。她在患癌期间依然参加中国好声音，她的网易云的歌单里只有一首歌「你不能爱我」，大概她还有着未完成的梦想和憧憬着的爱情吧。 这些艺术家们激励着我要珍惜现在，好好生活。","categories":[],"tags":[{"name":"感悟","slug":"感悟","permalink":"http://www.chengkangjian.com/tags/感悟/"}]},{"title":"使用 prettier 格式化统一代码风格","slug":"prettier","date":"2019-04-04T08:55:39.000Z","updated":"2019-04-13T14:53:07.279Z","comments":true,"path":"2019/04/04/prettier/","link":"","permalink":"http://www.chengkangjian.com/2019/04/04/prettier/","excerpt":"","text":"背景最近在参与的一个项目中，项目的代码质量是不规范的，分号时加时不加，空格这有那没有，括号这括那不括…我终于体会到了曾经身边的大佬们看我的代码是什么感觉了。 刚刚还看了老许的「许式伟的架构课」开篇词，老许将程序员类比成建筑师时，按照能力水平分，大概分为三类，搬砖师、工程师、架构师。搬砖师主要写能跑的程序，只要程序能跑起来，就万事大吉了。工程师会从多个维度关注代码的质量、关注代码的可阅读性、可扩展性、可维护性、可复用性…。因为世界是变化的，代码能跑起来是远远不够的，我们需要花时间去考虑如何去维护代码，增加新需求，适应最新的变化。这才是工程师-不断提升软件工程质量的程序员。 关于代码质量的提升，在我看来，最好的方式是认真的逐行 code review，因为我的代码提升就是在大牛的带领下，通过code review一天比一天好，我在心里一直感谢着曾经看过自己的代码，发现和提出自己代码问题的人。 一般情况下，发现问题，我们使用手工的方式修改和调整，后来有了 eslint、tslint 等工具帮助我们发现代码风格和质量问题，不过发现归发现，修改还是得亲自动手的，生命就这样一天一天在改 bug 中度过，直到出现了 prettier，就像是黎明遇到了黑夜，一切都变的简单起来，生活也顿时充满了希望。 什么是 prettierprettier 是一个代码格式化工具。它可以在不改变代码语义的情况下，美化代码，让你的代码清晰易读，风格统一。 为什么要用 prettier统一团队代码风格一个团队如果没有一个统一的代码风格，团队成员之间相互参与到对方的项目是非常不方便的，有时也会产生代码风格的讨论和争议，这是高成本的（关于代码风格的讨论和争吵是非常消耗时间的）。而且人们在写代码的时候是感性的，没有人愿意轻易接受别人的风格，也没有人喜欢频繁告诉身边的同事如何设计他们的代码，因为这往往是并没有对错的，只是风格没有统一，而使用 prettier 可以按照一定的格式，将团队的代码风格进行自动的格式化统一，这样很好的解决「你可以有你的原则，团队有团队的规则」的矛盾关系。 帮助新人这里的新人可以指团队新成员或者刚入门的初级开发者。如果一个团队新加入了一个成员，那么新成员的代码风格和现有团队的风格有很大的可能是不一样的，毕竟来自不同的工作背景。使用prettier 后，可以不用担心新成员的风格和现有团队风格到的格格不入，因为它能格式化你的代码符合现有的风格，无论你来自哪里，你到了这里，你就是我们的一份子，很好的帮助了新人快速融入团队。如果是一个刚入门的初级开发者加入团队，这个时候新人往往可能是不太清楚如何写出好的代码的，prettier 也能帮助新人避免一些错误，帮助他们更好的成长，写出让人容易阅读的代码。 提高效率提高效率，可以节约时间，节约时间就是珍惜生命，没想到这里，我就会想到著名的一段话：「人最宝贵的是生命，生命每人只有一次，人的一生应当这样度过：当他回忆往事的时候，他不会因为虚度年华而悔恨；也不会因为碌碌无为而羞愧，当他临死的时候，他能够说：我的整个生命和全部精力，都献给了世界上最壮丽的事业——为人类的解放而斗争。人应当赶紧的充分的生活，因为意外的疾病和悲惨的事故随时都可能结束他的生命。」为了让自己的一分一秒过的有价值，要将自己从繁琐的事务的脱离出来，去做一些自己能力范围内更有价值的事情。我相信，没有人愿意在写代码的时候，这里删个「括号」，那里加个「分号」，使用prettier，一键格式化，让生命更有价值。 简单易用可信赖简单易用意味着使用成本很低，意味着小投资，大回报。在项目中使用 prettier 不会影响项目的稳定性，也不会带来冲突或负面影响。目前为止，从 2017 年发布至今，已经有 31000+ 的 star，已经被 facebook、react、webpack、babel、yarn 等众多知名项目中采用。 如何使用如何使用 prettier，官方文档中介绍了很详细 prettier，因为大多数项目目前都会集成 Eslint，这里简单介绍下如何与 Eslint 集成使用 prettier。 1.Use ESLint to run Prettier 使用这种方式意味着用 ESLint 运行 Prettier，但是需要保证 ESLint 和 Prettier 的规则一致性，不然会导致规则冲突，比如：ESLint 的规则是 semicolon: true 而 Prettier 的规则是 semicolon: false 那么，此时无论分号是否添加，总会出现 [eslint] Insert;(prettier/prettie 或 [eslint] Extra semicolon. (semi) 提示修改。 123456789yarn add --dev prettier eslint-plugin-prettiereslintrc.json:&#123; &quot;plugins&quot;: [&quot;prettier&quot;], &quot;rules&quot;: &#123; &quot;prettier/prettier&quot;: &quot;error&quot; &#125;&#125; 2.Turn off ESLint’s formatting rules使用这种方式，意味着，关闭了 ESLint 的规则，仅使用 Prettier 的配置，此时，ESLint 的配置就无效了。 123456yarn add --dev eslint-config-prettiereslintrc.json:&#123; &quot;extends&quot;: [&quot;prettier&quot;]&#125; 3.Use both同时开启 ESLint 和 Prettier，同时对代码进行美化。 123456yarn add --dev eslint-plugin-prettier eslint-config-prettiereslintrc.json:&#123; &quot;extends&quot;: [&quot;plugin:prettier/recommended&quot;]&#125;","categories":[],"tags":[{"name":"FE","slug":"FE","permalink":"http://www.chengkangjian.com/tags/FE/"}]},{"title":"你有你的计划，世界另有安排 - 选择","slug":"about-select","date":"2019-03-26T12:35:21.000Z","updated":"2019-03-31T10:41:26.801Z","comments":true,"path":"2019/03/26/about-select/","link":"","permalink":"http://www.chengkangjian.com/2019/03/26/about-select/","excerpt":"","text":"关于选择 最近一段时间，面临的选择突然多了起来，关于工作机会的选择，关于股票买卖的选择，关于一个多年未联系的老朋友要不要去联系的选择…人生由选择构成，也可能终于选择。 所以，我也顺便回忆了下自己的人生选择。小的时候，我不懂什么叫选择，虽然不懂，也做了很多选择，我选择了和我兴致相投的同学做了朋友，选择了在喜欢的老师的课堂上认真听讲，选择了经常去游戏机厅打游戏，选择了和一个不喜欢的同学打一架，选择了一双喜欢的鞋，选择了一首爱听的歌…每一个在当时的选择都没有声音，却都在今天影响着我。我不懂什么叫选择，我根据着自己的潜意识做着选择，感谢过去，没有让自己选择过于糟的事情，以致于我现在还好。 父母是小时候选择的保护伞，当我选择了错误，会引导我改正，会承担起自己选择的后果。小时候多好啊，尽情的选择，只要选择不是太糟糕，而不用去承担什么，有爸爸妈妈保护着，甚至还有《未成年人保护法》保护着。 选择一个大学和专业 随着成长，18岁的那一年，我作出了自己当时人生中最重要的一个选择，没有经过家长的同意下，选择填报了「桂林理工大学」的「电子商务」专业。其实，「桂林理工大学」最好的专业是「给水排水」、「土木工程」等工程类专业，毕竟这些专业在「桂工」是比较成熟和优秀的，但是我还是选择了「电子商务」，我的选择没有什么根据，主要是直觉，可能是我对「商」这个字情有独钟吧，我对商业是比较感兴趣的，而且，电商这个东西感觉以后会有前景（之所以这么想，可能是由于在高中的那个时候在「淘宝」买过一件非常非常喜欢的 T-shirt，哈哈）。直觉是一个很神奇的东西，虽然不知道直觉是什么。如今看来，当初的选择不是很差，至少让我上了大学，让我有能力立足于社会，也符合了当初的预期。 选择一个城市 人生就是一场意料之外，除了桂林，我当然想过去很多城市上大学：青岛、济南、南京、上海…小时候我从来没想过来桂林，初中时从来没想过来桂林，高中时也没想过来桂林，直到我去了桂林，我发现我来了桂林。 人生就是一场突如其来，除了北京，我当然想过去很多城市去就业，上海、杭州、青岛、济南、苏州…小时候我从来没想过来北京，中学时从来没想过来北京，大学时也没想过来北京，直到我来了北京，我发现我来了北京。 选择一个职业 在大三那年的暑假，选择了暑假不回家过暑期，不是我不想家，我选择了留在学校准备着寻找实习工作，两个月的时间不长不短，过得不浪费不充实，自然而然的每天学习着 Java、SSH、数据库等技术的实践和应用，报名参加了阿里和 360 的 2016 应届生校招笔试，但是笔试完成后，我受到了人生中第一次小小的打击，笔试中的内容完全不在我的准备范围内，笔试中考查的是对数学、逻辑、coding 能力等基础知识技能的考查，很少涉及到编程实践和应用。当时，我再一次陷入了失望和迷茫之中，我本科学习的是电子商务，虽然涉及到了计算机科学技术相关知识，但是和理科生相比，我并不是很有优势，那段时间每天思考的是我未来到底能做什么，我能去什么样的企业，我能不能在社会立足…那段时间，经常和自己的远方上大学的好朋友在深夜 11 点打电话诉说着自己的迷茫和惆怅，然后白天仍然继续思考着未来的路在何方。 我在有道云笔记上写下着我未来可能从事着的职业，职业目录上有先被排除的设计、网络工程师等职业，也有待选择的产品、数据挖掘等职业，却没有我现在目前正在从事的职业，当时我是万万没想到的，生活就是这样的奇妙，你永远不知道，明天会发生什么，就像是股市，永远不知道明天是涨还是跌。现在还清晰的记得，当时去办公室和老师们请教问题，带我们「信息管理系统」课的侯治平老师，跟我说：“建议我选择做数据挖掘，未来有可能是成为数据科学家，千万不要做前端，前端的很工作，像修改界面样式等工作都是费事费时没有产出的。”，老师的话，我觉得很有道理，我心里默默的想，一定不要成为前端开发者，尽量做数据挖掘吧。尤其是听到「数据科学家」的称谓可是另作为学生的我很激动的，这也为我后来的第一份实习工作埋下了伏笔。 所有的想法都是一念之间，如不去沉淀，反复思考，转变为行动，最终都会随风而去，随时间流逝。有道云笔记中的诸多待选岗位不可能一一有机会去尝试和排除，后来无意中在互联网的世界里发现了「产品经理」的岗位，发现这真是一个很适合自己的岗位，比起程序员虽然可以实现一个产品，但是并不知道需要实现一个什么产品，而产品经理知道，产品经理就是产品的总负责人、把握着产品当下和未来。这听起来比程序员酷多了。于是我找了「人人都是产品经理」这本书进行了阅读，又学习了「Axure」软件可以绘制产品原型，结合自己的大学生活的思考和体会，觉得自己可以尝试这个职业。于是我将目前岗位从 「Java 软件开发」改为了「产品实习生」，再一次开始了我的求职之路。 投递简历的过程肯定是失败的多，我投递简历从杭州的岗位机会开始投，然后投上海，最后投北京，杭州和上海都有提供一两家实习机会，由于我还不能离开桂林前去面试，最终都放弃了。最后在北京投递的时候，因为当时的我可以离开桂林了，而且我还没去过北京，于是我将简历中的所在地的信息「桂林」更改为「北京」，没想到，这成为了一个转折点，简历通过率突然提高了，面试机会突然多了起来，\b于是我约了「亚信」、「优分期」、「爱鲜蜂」等四五个机会，定了火车票，定了青年旅馆、拉着行李箱，还有大学同学送给我的一个北京交通卡(很感慨)，决定独自一个人去了北京。 但是我桂林的朋友有着不让我去的诱惑，让我留下来，本着想去大一点的城市去学习和成长的原则，坚定了自己的选择。为了面试成功，我提前两天到了北京，住进了北宫门附近的青年旅社，并积极准备着自我介绍和简历中的内容。面试的那天，虽然面试时间是十点，地点是中关村软件园，因为是道路不熟悉，所以早晨五点就起来了，可能是上帝的眷顾，面试的过程很顺利。我最终我选择了亚信提供的产品实习机会，因为这个岗位是做数据相关的事情，有很多的未知等待着我去学习和探索。 在亚信呆了一年多，由产品实习生转变为了前端开发实习生，这是一个偶然，我从没想过要是做前端开发，但是还是主动去作出了这样的选择。现在想来，原因大概是：产品的工作有点虚，那段时间写产品文档，作竞品分析表现的都不是很好，而当时前端正好也缺人，萌生了转前端开发的念头。在决定要做产品的时候，我本来以为我这辈子也不可能做程序员了，世界就是这样的，经常和我们开玩笑。从此以后，我开始了前端开发的职业道路。 如何选择 自从2015年10月来北京至今，已经3年零5个月了，这三年里经历的最多的是换工作的选择，我并不是想频繁换工作，互联网的大环境就是这样，变化很快、流动性很高，无论是主动的还是被动的选择，每一个新工作的选择看在当时起来没什么，从未来的角度来看，每一次选择都至关重要。现在我面对每一次选择都很谨慎，因为人生只有一次，选择的机会成本很高。如果人生是一个棋盘，每一步选择就意味着走一步棋，一步不慎，会导致一步错、步步错的尴尬境地。无论怎样，我对曾经作出的选择都不后悔，当初的选择无论是从当时，还是从现在来看都不是很糟的选择，我不知道当初如果作出了另外一种选择会是什么样子，至少我现在是满意的，这就够了吧。 未来肯定还会遇到很多的选择，本着现有的经历和思考，我会根据以下的原则来作出原则： 首先，我会思考每一个选择后的结果。选择后的结果又可以分为两种：直接结果和间接结果。如果是两个工作机会，工作薪水的高低意味着选择的直接结果，工作本身带来的行业经验等意味着长远的间接结果。 其次，我会考虑每一个选择背后的风险，必须要把风险控制在可接受的范围内。如果说炒股或者抄币，我肯定不会拿出我的大部分积蓄去炒，因为风险太高。拿出 20% ~ 30% 的闲置资金是可以接受的，即使全部亏损。 另外，我会考虑选择的机会成本。如果我失去了一棵树，我将得到整个森林。选择伴侣和工作都是这样，选择了一个，意味着失去了其他的所有，除非放弃现在的那个。这个时候会有个问题，就是我怎么知道当下的计划是不是最好的，我怎么知道以后会不会有更好的机会。有个「三分之一法则」值得参考，就是无论什么样的选择，我在总数大概三分之一数量的机会上持观望，剩下的机会如果有比前面三分之一更好的机会立即决定。当然，这个法则有一定的适用场景。 然后，利用好理性选择和感性选择两把双刃剑。在对待事情的选择上，更多的是以理性为主作出决策，会判断每一种选择的结果概率，理性分析作出选择。在关于和人相关的决策上，会多考虑感性的因素，比如在和女朋友吵架认错这件事上，认为自己正确的一方不一定就不会认错。 最后，会尽可能的选择不敢做的美好的事情。在选择去做不敢做的事情上，意味着会突破自己的舒适区。就像是最近一期「歌手」录制中陈楚生在开始演唱「鱼」时提到：“陈绮贞在创作「鱼」这首歌时，是想送给很多在做选择的人，在她平时的日子里，她也想要去突破一些自己的极限，可是每次要去做这样的事情的时候，她又被现实给拉回来，但是其实没有一个选择是完全正确的，只有当你踏出那一步，他才有可能让你看到不一样的风景”。TED 上有一个视频：去做那些你害怕的事吧，这让你更强大！ 提到，我们害怕去做的、问的、说的，这些有可能正是我们需要的，换句话说就是：简单生活，痛苦选择；痛苦选择，简单生活；","categories":[],"tags":[{"name":"思考","slug":"思考","permalink":"http://www.chengkangjian.com/tags/思考/"},{"name":"成长","slug":"成长","permalink":"http://www.chengkangjian.com/tags/成长/"},{"name":"我","slug":"我","permalink":"http://www.chengkangjian.com/tags/我/"},{"name":"选择","slug":"选择","permalink":"http://www.chengkangjian.com/tags/选择/"}]},{"title":"我好像知道了上帝是谁","slug":"what-is-god","date":"2018-11-11T02:40:42.000Z","updated":"2018-11-11T04:08:54.000Z","comments":true,"path":"2018/11/11/what-is-god/","link":"","permalink":"http://www.chengkangjian.com/2018/11/11/what-is-god/","excerpt":"","text":"小时候，听过一首歌，上帝是女孩，打开了我思考上帝之门… 作为十多岁男孩的我于是开始思考上帝是谁… 为什么现在我在过马路？为什么我在问自己这个问题？谁在控制着我？我又是谁？ 那时候我还小，肯定是不知道答案的，想着想着就忘了 后来我渐渐长大，有一天我无意看到了一篇文章 「上帝正在惩罚不读书的人」 「上帝」两个字再一次映入我的眼帘和脑海，上帝啊，你到底是谁… 后来我开始听「吴军老师的得到专栏」，他曾在专栏里说过，「上帝喜欢笨人」 又是上帝… 这么厉害的人不断在他们的言论中提及「上帝」，每次听到「上帝」这个词，我就会想「上帝是谁」这个问题 于是，突然，我仿佛思考到了上帝的样子… 动物世界中的上帝，就是动物世界的生存法则 — 弱肉强食 人类社会中的上帝，也就是人类社会的生存法则 — 人类的社会制度、法律、道德原则、经济周期等 上帝是看不见摸不着的，但是如果你做了上帝不允许的事情或者不喜欢的事情，上帝就会出来惩罚你 上帝和自然的关系，竟然和老子的「道法自然」异曲同工 上帝在我眼中，简单的说就是:「自然法则」","categories":[],"tags":[{"name":"思考","slug":"思考","permalink":"http://www.chengkangjian.com/tags/思考/"},{"name":"成长","slug":"成长","permalink":"http://www.chengkangjian.com/tags/成长/"},{"name":"感悟","slug":"感悟","permalink":"http://www.chengkangjian.com/tags/感悟/"}]},{"title":"如何在残酷的世界中好好生活","slug":"How-to-live-in-a-cruel-world","date":"2018-03-07T15:00:02.000Z","updated":"2019-03-20T15:04:02.439Z","comments":true,"path":"2018/03/07/How-to-live-in-a-cruel-world/","link":"","permalink":"http://www.chengkangjian.com/2018/03/07/How-to-live-in-a-cruel-world/","excerpt":"","text":"最近的一年，我有意无意中知道了一些很多不好的事情，认识到世界，不是我想象的那样不好，而且这个世界的黑暗超过了我的想象。 每当我走在路上，发现了路边的被遗弃的、被虐待的共享单车，我就在想，为什么有的人就是想做坏事呢？对于破坏共享单车的这部分人，我联想到我小时候犯错误的情景，我记得老师问我：“为什么踢隔壁班教室的门”？我当时也认真的问了自己，然后回答：“不知道！”。是的，对于作恶的人，是真正意识不到自己的恶的，或者偶尔良心发现意识到自己的恶了，却又被心中的黑暗所蒙蔽。我想，如果一个人真正的意识到了自己的行为是恶的，自己的行为是不好的，他或许会改邪归正。 身在这样的一个互联网的时代，我认为人们都是在裸奔的。前段时间知道了互联网的世界里有“暗网”这回事，而且据说占据了整个互联网八九成（大概的参考统计，数据来自互联网）的比重，原来阳光下的互联网仅仅是冰山一角，有相当的一部分人在暗网底下做着 拐卖儿童、绑架谋杀、毒品交易、人体器官买卖等如此黑暗的事情。据说看了的人，三观会沦陷崩塌。我还没看，听说了这回事，三观已经开始崩塌了。原来，看起来这是一个美好和谐的世界，实则是和丑恶并存的世界，我该如何在这样的世界中好好生活。 首先想到的赚钱，没错的，金钱就是力量，钱多了，是自我保护的有力手段，所以要好好赚钱。钱有时候是一个武器，可以让每个人在社会的环境中一定程度的保护自己。但是很多时候，钱又是无力的。比如，面对着互联网嘈杂的信息和诱惑，如果进行防御和抵抗，这个时候就和钱没关系了，这个时候需要个人的价值观的导向帮助你去做正确的选择，来筛选有用的信息浏览和阅读。很多时候，世界的黑暗面是很强大的，每一个随时都有可能被黑暗吞噬。我们需要做的是，把时间浪费在美好的事情上。 互联网中充斥着真真假假、善善恶恶、是是非非的信息，改变能改变的吧，接纳不能改变的，努力辨别哪些是可以改变的哪些是不能改变的吧，然后过好自己的生活。","categories":[],"tags":[{"name":"思考","slug":"思考","permalink":"http://www.chengkangjian.com/tags/思考/"}]},{"title":"聊聊也好","slug":"a-change-in-the-attitude-of-the-XiongAn","date":"2018-01-06T16:34:18.000Z","updated":"2019-06-13T08:28:32.968Z","comments":true,"path":"2018/01/07/a-change-in-the-attitude-of-the-XiongAn/","link":"","permalink":"http://www.chengkangjian.com/2018/01/07/a-change-in-the-attitude-of-the-XiongAn/","excerpt":"","text":"前些日子，听闻北京炒房团连夜赶车到雄安炒房的消息时，我的心里表现的是一脸的不屑和不解，那里有什么值得你们做出这么疯狂的决定，一个新区这么让人疯狂吗？时间过了大概一年了，现在我不再这么认为了，对于投资和赚钱而言，没有很疯狂只有更疯狂，如果对于赚钱都不着急，还有什么值得去着急。 今天和老同事旭哥和新元，时隔我从前东家离职一年多以来再次相聚，讨论了这个话题，老刘不愧是清华毕业生，思考问题的角度就是有深度。颠覆了我之前的一些认知。 对于雄安我没有归属感的认知。每次和周围的朋友或者亲戚谈论到买房，都会有意或无意的谈及和建议我到雄安买房，我之前认为我不会去那里，因为那里没有归属感，作为一个山东人，要去河北一个城市定居，这是我这辈子也没有想过的，倒是想过去杭州、苏州、南京等城市都有想过，由于没想过，所以对于身边人的这个雄安落地的建议，我甚至都不思考，直接用“不可能”回绝。其实现在想一想，无论我人在哪里，只要生活品质优越，有钱花，出门便捷，生活幸福不就是自己追求的吗? 我之所以选择杭州、苏州等城市不正是看上这些二线城市的生活环境相对来说既有大城市完善的基础设施带来的便捷，又没有那么多大城市病不是吗。如果雄安可以带来和苏州、杭州等城市一样的甚至更好的生活环境，选择雄安作为自己的归属地又何乐而不为呢。 对于企业发展的背后原因的认知。2017年发生的事情，美团进入网约车领域，如果用常人的思维思考，美团要跨界发展；如果再深入一点，美团以团购起家陆续有了团购、外卖、酒店、旅游、电影等领域、涵盖了吃喝玩乐的方方面面，从衣食住行的角度来看，美团已经进入了食住的领域，衣和行的领域是待进入的，所以现在进入出行领域并没有什么奇怪的。如果换个角度，从企业背后的资本方考虑，进入出行领域，无疑是想在网约车市场分一杯羹，这其实体现的是新势力对旧势力的挑战，这背后代表的是两股力量。 最近在思考投资的事情，再次买了一些基金，其实我对基金的背后的样子是一无所知的，老刘提出的观点再一次颠覆我的认知，“基金存在的原因是对国家队资金动向的一个遮罩层” ，国家队的资金难道是在诸多的基金公司里吗？我不清楚，但不重要，这个观点已足以让我惊讶。 我更深入的理解了洗钱的含义，把钱洗一遍就是洗钱，这个“洗”字，就是把黑钱变成了白钱，把不合法变为了合法。有很多没想到的套路，比如：自己开个游戏公司，通过将黑钱用来买游戏装备，游戏公司赚来的收益就是合法的收益，这个过程就将黑钱洗白，完成一个洗钱的过程。洗钱的手段有很多，网购、比特币等，所以网络实名制的政策不排除有反洗钱的原因吧。 本次交流，让我更加坚信的认为线下的交流很有意义，应用通信的发展，一方面确实给我们带来了极大的便捷，但是也带来了新的问题。微信等应用软件看似让人与人的沟通不受时间和空间的限制，方便人们的交流，这在本来是好事，应该会拉近人的距离才是，但是结果是相反的，不仅没有拉近人的距离，反而让人与人之间变得更疏远。 没有微信的时代，人与人相隔五年没联系再次联系可能会两眼泪汪汪，感情如初不说，甚至情谊更加深厚，这个时候感情不会随着时间而改变，是恒定的。而有微信的时代，如果好朋友五年不联系，再次联系，导致的结果是两个熟悉的陌生人，这个时候感情会随着时间逐渐变淡，是下降的。究其原因，没有微信的不联系是无法联系是被动的不联系，朋友之间时而还会挂念对方也会想对方在挂念着自己，再次联系的时候是自然的，没有隔阂的。而有微信的不联系是能联系而不联系是主动的不联系，朋友之间可能也会时而想念对方但是如果不联系会让对方误认为对方或许已经将自己遗忘，再次联系的时候的感觉，是不自然的，是有心理隔阂的。","categories":[],"tags":[{"name":"思考","slug":"思考","permalink":"http://www.chengkangjian.com/tags/思考/"}]},{"title":"我的无知","slug":"unknow","date":"2017-12-14T13:53:19.000Z","updated":"2019-06-13T07:15:15.536Z","comments":true,"path":"2017/12/14/unknow/","link":"","permalink":"http://www.chengkangjian.com/2017/12/14/unknow/","excerpt":"","text":"最近听了老师的传播学课，让我对传播二字有了新的认识。在这之前，我所理解的传播应该是知识的传播，文化的传播等这些事物传播组成的词语，或者是传达、播报等对传播的字面意思的肤浅理解。 即使上完了这门课，我现在依然是不懂传播，但是我知道了，传播不再是我之前所理解的传播了。 现在我所知道的传播，比如传播的范围，小到人与人之间的传播，中到组织传播，比如高校，企业，社会团体等组织之间的传播，再大一点到大众传播，每个领域内的传播都有区别和联系。 后来我总结，其实人与人之间的传播不也是人际沟通和推广的学问嘛，不也是有营销的学问嘛，不还是心理学，行为学的学问嘛，人与人之间传播的学问，不简单。组织间的传播学问，也包含着领导力，组织管理，项目管理，企业文化建设等学问。大众传播范围就更大了，社会行为学，社会心理学等学问也都属于大众传播的范畴。 想到这里，我感受到了知识的博大精深，令我望而生畏。 我再也不敢说我懂了什么，我发现我对我以及我周围的一切一无所知。 我懂自己了吗，此时此刻我好像知道自己在做什么，也好像知道自己的行为的目的，但知道的又不是那么的准确。 我懂世界了吗？世界那么大，我肯定不懂。我只是通过我的感知了解和体会了一个世界在自己内心的镜像，是一个经过了我自己加工过的片面的世界，这不是一个真正的世界。 联想到自己穿的衣服，做的椅子，桌子及桌子上碳素笔，笔记本，显示器，掉落的头发丝，还有那瓶子里蒲公英茶… 我身边的一切的一切我都不懂。 每一样事物都是熟悉的，又是陌生的，我想努力去了解，却变得愈来愈熟悉，愈来愈陌生…","categories":[],"tags":[{"name":"思考","slug":"思考","permalink":"http://www.chengkangjian.com/tags/思考/"}]},{"title":"学习了下「CDN」","slug":"about-CDN","date":"2017-08-30T15:43:27.000Z","updated":"2019-06-13T08:29:46.542Z","comments":true,"path":"2017/08/30/about-CDN/","link":"","permalink":"http://www.chengkangjian.com/2017/08/30/about-CDN/","excerpt":"","text":"前段时间，因工作内容中中设计到很多 CDN 业务的知识，于是读了一遍《CDN 技术详解》，这本书内容很丰富，讲了很多 CDN 实现的原理和细节，想吃透这本书，读一遍肯定是不够的，需要理解、思考、和长期实践才能真正的理解 CDN 这块内容。 在阅读此书之前，我仅仅是知道 CDN 可以提高内容的加载速度，通过将网站的资源图片等文件放到七牛的存储服务器中，会提高资源的加载效率，但是我没有测试过，也不知道其是如何做到的。经过几个月的工作实践和阅读，我对 CDN 的理解更进一步。尤其是让我进一步了解了 CDN 和互联网这个概念。 CDN 是全称是(Content-Distribute-Network)，中文直译名称：内容分发忘网络。简单说，CDN 要做的是将网络一端内容快速、准确的传输到用户面前。类似于现实世界的物流，将企业的商品，快速、安全的送达到用户手中。 现如今，互联网世界里的人都在大谈特谈互联网、互联网+，感觉自己作为一名互联网从业人员，并没有理解互联网，它是人类几十年智慧的结晶，我知道真正理解它并不容易。《CDN 技术详解》这书让刷新了我对互联网的认识。 互联网概念可以从两层层面看:一层是狭义的互联网，一层是广义的互联网。 狭义的互联网是以 TCP／IP 代表的网络层，也就是通过 TCP／IP 网络形成的互联网基础，将计算机链接起来，实现了计算机之间的互联互通。广义的互联网也就是我们常说的互联网，它由以 TCP／IP 代表的网络层和以 WWW 万维网为代表的应用层两层组成。 互联网的设计理念是(相对的)中立和无控制的，(相对的)说任何人都有决定权，它的任务就是如何更好的将数据进行端对端的传输。","categories":[],"tags":[{"name":"CDN","slug":"CDN","permalink":"http://www.chengkangjian.com/tags/CDN/"}]},{"title":"未知的花，魅知的旅","slug":"unknow-flower-unknoe-road","date":"2017-08-18T05:29:08.000Z","updated":"2019-06-13T08:29:00.054Z","comments":true,"path":"2017/08/18/unknow-flower-unknoe-road/","link":"","permalink":"http://www.chengkangjian.com/2017/08/18/unknow-flower-unknoe-road/","excerpt":"","text":"在听一首曲子《未知的花，魅知的旅》，有时候音乐的表达更能打动人心。 世界很喧嚣，社会很烦躁，当我带上了耳机，顿时，全世界与我无关。 这种感觉是幸福的。 于是：想到了下面的小诗： 你见，或者不见我， 我就在那里，不悲不喜； 你念，或者不念我， 情就在那里，不来不去； 你爱，或者不爱我， 爱就在那里，不增不减； 你跟，或者不跟我， 我的手就在你手里，不舍不弃； 来我的怀里， 或者， 让我住进你的心里。 默然，相爱；寂静，欢喜… 我喜欢用 省略号 给一首诗、一段话、一篇文章…作结尾。也喜欢用 省略号 给一个不知道想表达的情景作描述。 就像现在这样，这样…","categories":[],"tags":[{"name":"心情","slug":"心情","permalink":"http://www.chengkangjian.com/tags/心情/"}]},{"title":"心情","slug":"feeling","date":"2017-08-16T02:00:00.000Z","updated":"2019-06-13T08:31:54.000Z","comments":true,"path":"2017/08/16/feeling/","link":"","permalink":"http://www.chengkangjian.com/2017/08/16/feeling/","excerpt":"","text":"梦想着有一天，可以，照顾好自己身边的人；顺便的，也成就着自己，过着简单的生活，偶尔会走进大自然感受最本真的世界。 想逃离浮华，不知道有没有办法。活在一个金钱主义的世界里，太难逃脱。 我的追求是放弃追求，明明是我不想追求，为什么我依然在追求…","categories":[],"tags":[{"name":"我","slug":"我","permalink":"http://www.chengkangjian.com/tags/我/"},{"name":"心情","slug":"心情","permalink":"http://www.chengkangjian.com/tags/心情/"}]},{"title":"不想失去的东西","slug":"donot-want-lose-thing","date":"2017-08-15T05:30:18.000Z","updated":"2019-06-13T07:23:55.166Z","comments":true,"path":"2017/08/15/donot-want-lose-thing/","link":"","permalink":"http://www.chengkangjian.com/2017/08/15/donot-want-lose-thing/","excerpt":"","text":"小的时候，会有很多天马行空的想法，带着童真、好奇和爱好，可以写小诗，作曲，搞恶作剧… 那时也会有很大的勇气，甚至现在我都对过去自己 的勇气表示佩服，小学的时候和班里的同学一起罢课、打架； 高中的时候见到喜欢的女孩就追； 大学的时候和同学们一起创业； 直到来了北京， 现在除了工作中偶尔会需要勇气接受一些挑战性的工作项目之外，感觉勇气在消磨殆尽…","categories":[],"tags":[{"name":"心情","slug":"心情","permalink":"http://www.chengkangjian.com/tags/心情/"}]},{"title":"尤雨溪知乎Live总结 下篇","slug":"evan-you-live-pro","date":"2017-06-05T12:04:38.000Z","updated":"2019-06-13T10:28:05.887Z","comments":true,"path":"2017/06/05/evan-you-live-pro/","link":"","permalink":"http://www.chengkangjian.com/2017/06/05/evan-you-live-pro/","excerpt":"","text":"状态管理flux、redux、vuex、mobx、Rx.js… 本质：从源事件映射到状态的迁移（改变），映射到UI的改变。按钮 --1--&gt; 状态 --2--&gt; UI 声明式渲染解决了从状态到UI的映射 状态管理解决的是事件到状态的映射，将这部分代码抽离出来，管理好，维护好，是状态管理工具做的事情。 redux和mobx体现两种截然不同的思维方式或者说范式，redux强调数据不改变，reducer拿到原来的state和action返回的是一个新的state。mobox和vue中数据是可变的。 把 Vue 当 redux 用让 Vue 当 MobX 用 这些方案都没有回答如何处理异步，mobx和vuex的异步处理，就是你在action里想怎么搞怎么搞。 一般的CRUD操作，不存在太复杂的异步，杀鸡不用牛刀。如果遇到复杂的场景，如服务端推送、实时、同时请求。，可以考虑Rx.js处理，Rx.js最适合处理事件流。Rx.jsCycle.js 状态的改变在vuex这些工具中需要在mutation中写出来。如果在使用Rx.js的场景下，直接从事件源，映射到结果。其中为代表的是Cycle.js，从头到尾就是一个流，从获取事件是一个流、到状态改变是一个流、到更新dom是一个流。 组件状态和全局状态如何区分，至今也没有一个好的区分方案。 路由传统的路由思想，比较早的是从Ember.js这个框架中出现单页应用的路由。自从react和vue这些框架出现以后，会发现，把组件和路由解耦是可行的，而且更加灵活，另一个启示是从组件出发思考，路由就是将url映射到组件的一个过程。 url到组件的映射，从url出发还是状态出发，其实url就是一个状态。这样的话，一个简单的路由，就是一个动态组件，在vue里面就是component is，在react里就是一个对象表，通过key去渲染。那是一个假象，完整的路由系统要考虑：hash模式和history模式兼容、懒加载、钩子、跳转…其实这是有些复杂度的。 react-router4是一个去中心化的路由方案，类似通过功能性组件（组件做路由）实现。 Web路由和APP路由区别:切换方式的区别 Web路由：二级切换，切换即替换APP路由：卡碟式切换，切换即覆盖 CSS方案主流的 CSS 方案 跟 JS 完全解耦，靠预处理器和比如 BEM 这样的规范来保持可维护性，偏传统 CSS Modules，依然是 CSS，但是通过编译来避免 CSS 类名的全局冲突 （命名随机化避免命名冲突） 各类 CSS-in-JS 方案，React 社区为代表，比较激进 Vue 的单文件组件 CSS，或是 Angular 的组件 CSS（写在装饰器里面），一种比较折中的方案 比较要结合场景在单页应用的场景下，使用BEM相当于平行的维护了两套结构，一套是组件结构，一套是规范结构。将两者统一是比较好的方案。 css in jshttps://medium.com/seek-blog/a-unified-styling-language-d0c208de2660 https://medium.com/seek-blog/a-unified-styling-language-d0c208de2660 传统 css 的一些问题： 作用域 （解决的已经很好了，css module， inline sytle ，vue scoped） Critical CSS （仅导出页面相对应的css代码，不加载不必要的css代码） Atomic CSS （减小体积） 分发复用 跨平台复用 css in js 通过运行时能较好的解决问题2。 在vue里 使用CSS Modules 会不会比 使用 scoped 好？没有本质区别，scoped成本更低，但是导出的页面更大。css module一定程度运行时的代价，因为需要动态的class绑定，区别不大。 Atomic CSS：原子类css，将公共的共享的样式类抽象成原子类，最终的体积会比较小。分发复用：css in js都是javascript,可以像普通javascript一样分发的npm上进行复用：其实css放到包里也可以发布到npm上进行复用的，不算是个大优势。跨平台复用：css in js跨平台复用，其实css 也可以pass成javascript进行跨平台复用的。 这个方案，不一定好，态度保留。 构建工具出现背景：平台越来越强 要求越来越高 任务复杂度 工具复杂度 构建工具解决的其实是几方面的问题： 任务的自动化 开发体验和效率（新的语言功能，语法糖，hot reload 等等） 部署相关的需求 编译时优化 grunt - gulp - webpack - rollup - systemjs，这些构建工具中，主打一切皆模块的webpack脱颖而出。 大多数情况下 npm script + webpack 组合就可以了。 最终代码跑在浏览器里，这个限制要求我们必须构建，因为我们没有浏览器的控制权。 现在前端的构建工具链很完善了。html 、css 、js 都有自己的构建工具，只需写转换规则就好。 关于部署的一个文章 部署优化：请求合并（打包），静态资源路径映射，小尺寸资源内联，代码分割、时间戳。webpack复杂是因为解决的问题本来就很复杂。rollup简单优雅，因为做的事情简单。 构建时优化 服务端数据通信restful api ==&gt; crud 实时数据库firebase、horizon ==&gt; 数据实时性 数据关联性 graphQL:暴露一个接口，急于图的查询而不是表，对复杂关联数据的获取，数数据量的优化也更加精确。 服务端的数据是否应该放在store里面去？有些多此一举，因为改还是需要通过接口改。 跨平台渲染React native 、 Weex本质：设计框架的时候，框架的渲染机制和dom解耦。ReactNative 针对每一个平台设计渲染引擎。 新规范Web Component webassembly 总结我们聊了很多东西，可能比较杂，但我希望大家发现其中一些共性的东西：技术方案都是先有问题，再有思路，同时伴随着取舍。在选择衡量技术的时候，尽量去思考这个技术背后是在解决什么问题，它做了怎样的取舍。这样一方面可以帮助我们更好的理解和使用这些技术，也为以后哪天你遇到业务中的特殊情况，需要自己做方案的时候打好基础。 问题关于react和vue具体的技术选型能举个例子来说明这两个框架所适用的场景吗？适用场景几乎差不多。 对于前端框架的学习需要到什么程度才算比较好？熟悉源码？理解思想？还是其他什么？理解思想更重要，学习源码，吸收设计原理和方案对做业务没啥帮助。 vue现在一直在推后端渲染的模式，是为了seo么？现在前端的性能在不断提高，不是应该前端渲染的发展趋势更好么？TTC 直出的价值 让用户早一点再早一点看到界面 现在HTTP/2越来越普及，前端构建工具在针对HTTP/2上怎么去找一个平衡点呢？实际测量才能有的谈","categories":[],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://www.chengkangjian.com/tags/javascript/"},{"name":"vue","slug":"vue","permalink":"http://www.chengkangjian.com/tags/vue/"}]},{"title":"尤雨溪知乎Live总结 上篇","slug":"evan-you-live","date":"2017-06-05T11:55:59.000Z","updated":"2019-06-13T10:28:28.828Z","comments":true,"path":"2017/06/05/evan-you-live/","link":"","permalink":"http://www.chengkangjian.com/2017/06/05/evan-you-live/","excerpt":"","text":"开篇框架的比较，不谈场景都是刷流氓：不同的场景，不同的开发者爱好会产生不同的需求，多种方案的并存是必然和优异的。 针对不同的场景、框架背后需要解决的问题、结合经验选择框架。 组件现在所有的框架都已经支持组件化的开发方式。最初是已页面作为开发单位，html、css、js，当时我们的思维方式就是那样。后来我们的前端开发从页面转变为了应用。应用就会有模块封装和切分的需求，很快我们发现应用是可以拆分为组件树的，这是偏展示的一个理解，react的出现揭示了一个事实，就是组件可以是函数。 想象一下，整个应用是一个大的函数，函数里面可以调用别的函数，每个组件是一个函数，一个组件可以调用别的函数，返回viture dom,这突破了我们原来对静态页面的理解方式。但是这种简单的函数式的组件在实际应用过程中是不够的，所以react默认的组件形式里有了state，然后外面用class来包装等等。 组件可以分为四类： 纯展示组件 接入性组件container（会和数据层的serverce打交道） 交互型组件（比如各类加强版的表单组件，通常强调复用） 功能型组件（组件本身不渲染任何内容，作为功能扩展而存在比如 &lt;router-view&gt;，&lt;transition&gt;，作为一种扩展、抽象机制存在。） template和jsx的对比：jsx在写功能性组件的时候，是非常方便的，因为其继承了javascript语言的灵活性，是远超模版的。template在写纯展示型组件的时候是非常方便的。 colocation含义: 把应该放一起的东西放一起，比如vue的单文件把 style 、script 、 template 放一起。（以前是以语言为单位进行切分） 变化侦测和渲染机制Declarative Programming 声明式编程告诉“机器”你想要的是什么(what)，让机器想出如何去做(how)。（react、vue等框架的方式，直接描述dom和数据的关系就可以了，这就是数据驱动。）1234567&lt;!--声明式风格--&gt;&lt;!--只需声明你要啥--&gt;var numbers = [1,2,3,4,5]var doubled = numbers.map (function (n) &#123; return n * 2&#125;)console.log (doubled) //=&gt; [2,4,6,8,10] Imperative Programming 命令式编程命令“机器”如何去做事情(how)，这样不管你想要的是什么(what)，它都会按照你的命令实现。 （jquery直接干的方式） 123456789&lt;!--命令式风格--&gt;&lt;!--需要干事情--&gt;var numbers = [1,2,3,4,5]var doubled = []for(var i = 0; i &lt; numbers.length; i++) &#123; var newNumber = numbers[i] * 2 doubled.push (newNumber)&#125;console.log (doubled) //=&gt; [2,4,6,8,10] view = render(state)render就是react里jsx中的render函数，其实vue的template最终也是编译成一个个render函数的。模版本身和jsx和本质上相似的，他们的输入都是state，输出都是dom。 Virtual DOM底层实现可以是Virtual DOM，也可以是细粒度的绑定等等。 一直有一个疑问，以前 被人诟病，为啥 vue 的声明式写法就是推崇的？onclick绑定的作用域是全局的，造成了环境污染，裸写的函数完全不知道是被哪个dom引用。vue中的绑定是局部作用域，而且javascript的逻辑是放在组件里的，符合colocation的理念，这样就很好维护了。 变化侦测Reactivity in Frontend JavaScript Frameworks 变化侦测有两种方式：pull 和 push react 的 setState 和 angular 的脏检查属于 pull 的方式。 pull的方式，系统不知道数据什么时候变化，那么它需要一个信号告诉他说知道数据有可能变了，这个时候系统来进行一个暴力的比对，react 通过 Virtual DOM 中的diff方式，angular 是脏检查。能过这么做是因为 javascript 已经足够快，有浪费但是可以接受。 push的方式，Vue （响应式）和 Rx.js（Observable） 的方式，更加细粒度的更新，意味着更多的watcher，同样也会带来内存和性能的开销。 vue2选择了相对折中的方案，在组件层面，vue2使用的是 push 的方式，每一个组件都是响应式的watcher，这样vue能够知道哪些组件内部的状态发生了变化，然后在组件内部使用 pull 的方式通过virtual Dom进行比对更新。 pull和push的对比，不能说哪个方案一定好，本质区别是用侦测成本换取自动优化的成本。","categories":[],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://www.chengkangjian.com/tags/javascript/"},{"name":"vue","slug":"vue","permalink":"http://www.chengkangjian.com/tags/vue/"}]},{"title":"从零开始学习webpack搭建vue项目(二)","slug":"webpack-note-02","date":"2017-05-06T11:19:43.000Z","updated":"2019-06-13T10:34:46.792Z","comments":true,"path":"2017/05/06/webpack-note-02/","link":"","permalink":"http://www.chengkangjian.com/2017/05/06/webpack-note-02/","excerpt":"","text":"webpack+vue项目实践记录02配置webpack.config.js文件 支持http dev 支持热替换 支持es6 支持sass 打包的js文件自动插入到index.html模版中安装dev-server 12345# 安装$ npm install webpack-dev-server -g# 运行$ webpack-dev-server --progress 注意的是以上的安装方式除了要安装全局，还要本地安装。 执行webpack-dev-server --progress命令，报错显示没有找到配置文件，原来是需要--config来指定配置文件。 使用webpack-dev-server --config build/webpack.config.js --inline --hot完成服务的启动。 也可以使用 webpack --config build/webpack.config.js --progress --watch //这条命令可以启动watch观察者模式。 12345devServer: &#123; contentBase: path.join(__dirname, &quot;dist&quot;), compress: true, port: 9000&#125; 服务启动的文件如上所示，但是问题又来了，当我访问浏览器localhost:9000时，没有找到资源文件，说明还是有配置没有搞好，主要是路径配置的问题，搞这需要搞明白contentBase、path、publicPath…这些参数的含义。 搞好配置文件，实现可以正常访问项目12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364const path = require(&apos;path&apos;);const webpack = require(&apos;webpack&apos;)let HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;)module.exports = &#123; entry: &#123; app: path.resolve(__dirname, &apos;../src/main.js&apos;), &#125;, output: &#123; path: path.resolve(__dirname, &apos;../dist&apos;), //打包文件的输出地址 filename: &apos;[name].[hash].js&apos;, publicPath: &quot;/&quot; &#125;, resolve: &#123; alias: &#123; &apos;vue$&apos;: &apos;vue/dist/vue.common.js&apos; &#125; &#125;, module: &#123; rules: [ &#123; test: /\\.vue$/, loader: &apos;vue-loader&apos;, options: &#123; loaders: &#123; &apos;scss&apos;: &apos;vue-style-loader!css-loader!sass-loader&apos;, &apos;sass&apos;: &apos;vue-style-loader!css-loader!sass-loader?indentedSyntax&apos; &#125; // other vue-loader options go here &#125; &#125;, &#123; test: /\\.js$/, loader: &apos;babel-loader&apos;, exclude: /node_modules/ &#125;, &#123; test: /\\.(png|jpg|gif|svg)$/, loader: &apos;file-loader&apos;, // file-loader 都是用于打包文件和图片 options: &#123; name: &apos;[name].[ext]?[hash]&apos; &#125; &#125; ] &#125;, plugins: [ new webpack.HotModuleReplacementPlugin(), //支持热替换 new HtmlWebpackPlugin(&#123; template: &apos;src/index.html&apos; //指定处理模版 &#125;) ], // devServer: &#123; // colors: true, // &#125;, devServer: &#123; historyApiFallback: true, //不跳转 contentBase: path.join(__dirname, &quot;../src&quot;), //默认访问的本地静态文件的地址目录，建议最好是绝对路径 compress: true, // 启动gzip 压缩 Enable gzip compression inline: true, //时时刷新 hot: true, //支持热更新 port: 9999 &#125;&#125; 如上配置文件，执行webpack-dev-server --config build/webpack.config.js --inline --hot完成dev-server启动操作。 支持热替换其实 –hot 已经支持了热替换 但是另我不明白的是如果在CLI中不使用--line --hot，但是在devServer的配置中添加了指令，webpack-dev-server --config build/webpack.config.js执行时，热替换没有生效。 12345678devServer: &#123; historyApiFallback: true, //不跳转 contentBase: path.join(__dirname, &quot;../src&quot;), //默认访问的本地静态文件的地址目录，建议最好是绝对路径 compress: true, // 启动gzip 压缩 Enable gzip compression inline: true, //时时刷新 hot: true, //支持热更新 port: 9999&#125; 直到我添加下面的这个插件，解决了这个问题。至于原因至今未知。123plugins: [ new webpack.HotModuleReplacementPlugin(),//支持热替换], 在package.json 加上以下这段，就支持了使用npm run start启动项目了。1234&quot;scripts&quot;: &#123; &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;, &quot;start&quot;: &quot;webpack-dev-server --config build/webpack.config.js --inline --hot&quot;&#125;, 支持es6 支持sass到这时，我在想，需要安装些loader，css-loader、sass-loader、style-loader、babel-loader、file-loader(用于打包文件和图片),在这里连续安装了 1npm install sass-loader scss-loader --save-dev 在启动时，提示我需要安装node-sass,node-sass查了一下，简单说，就是将sass编译成css的一个工具，没有深究。 1npm install sass-loader scss-loader --save-dev 装完之后 1234567891011&#123; test: /\\.vue$/, loader: &apos;vue-loader&apos;, options: &#123; loaders: &#123; &apos;scss&apos;: &apos;vue-style-loader!css-loader!sass-loader&apos;, &apos;sass&apos;: &apos;vue-style-loader!css-loader!sass-loader?indentedSyntax&apos; &#125; // other vue-loader options go here &#125;&#125; 就直接ok了。 下一步，支持es6， 123456789101112&#123; test: /\\.js$/, loader: &apos;babel-loader&apos;, exclude: /node_modules/&#125;,&#123; test: /\\.(png|jpg|gif|svg)$/, loader: &apos;file-loader&apos;, // file-loader 都是用于打包文件和图片 options: &#123; name: &apos;[name].[ext]?[hash]&apos; &#125;&#125; 执行npm run start,提示安装babel-loader和babel-core，并依次安装 执行编译，自动引入到html文档中，使用html-webpack-plugin这个插件安装npm install html-webpack-plugin --save-dev添加此配置，其中template是指定处理的模版文件 12345plugins: [ new HtmlWebpackPlugin(&#123; template: &apos;src/index.html&apos; //指定处理模版 &#125;)] 另外有一点需要注意的是12345output: &#123; path: path.resolve(__dirname, &apos;../dist&apos;), //打包文件的输出地址 filename: &apos;[name].[hash].js&apos;, publicPath: &quot;/&quot;&#125; html-webpack-plugin插件是根据输出文件的路径配置进行对index.html进行处理的，将js文件插入到index.html中，需要保证此配置正确。其中“path”仅仅告诉Webpack结果存储在哪里，然而“publicPath”项则被许多Webpack的插件用于在生产模式下更新内嵌到css、html文件里的url值。","categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"http://www.chengkangjian.com/tags/vue/"},{"name":"webpack","slug":"webpack","permalink":"http://www.chengkangjian.com/tags/webpack/"}]},{"title":"第一次控制自我","slug":"control-myself","date":"2017-04-25T09:09:40.000Z","updated":"2019-06-13T07:01:15.624Z","comments":true,"path":"2017/04/25/control-myself/","link":"","permalink":"http://www.chengkangjian.com/2017/04/25/control-myself/","excerpt":"","text":"我知道自己的大脑和自己是两部分，这也形成了自己感性的一面和理性的一面。 当我的身体内的肾上腺激素飙升的时候的时候，往往是面临着压力的到来，感性的一面大行其道，自己的真性情显露无遗，会产生很多应激反应，比如发抖，脸红。 我知道，人没有好坏之分，只有好的时候和坏的时候，人是局限性的，好的时候和坏的时候在很多时候不是自己主动选择的，是自己身处的环境所诱导的。所以我不会和自己说自己是个好人还是坏人，自己都不是，自己就是一个人。 昨天是控制住了自己的感性的一面的第一天，值得铭记的一天，有了这第一次，我相信，后面的路会更好走。 我经常和朋友说，做事之前，需要先分析一下，这个事是好事还是坏事，如果是好事，那就坚持自己的原则做下去，如果是坏事，那么就告诉自己，stop it！我的朋友反驳说：难道你是个圣人？是的，我说的很轻松，做到它谈何容易，当我想干一件事，有时候明明知道是不好的，但是你就是控制不住自己，这就是我的人性的弱点，这就是我的人的局限性。 一直以来我都无法做到控制住自己，即使我想控制，但是心有余而力不足，但是庆幸的是，这些年来，自己的理性的时候占了大多数，导致自己没有陷入坏的自己的世界太深，大致还是向着好的方向发展，这得益于自己的三观相对正常。 每一次完全的掌控自己，过程是痛苦的，结果是美妙的；比如昨天的因导致了今天的果。 今天的感觉很异常，异常的好！","categories":[],"tags":[{"name":"思考","slug":"思考","permalink":"http://www.chengkangjian.com/tags/思考/"},{"name":"我","slug":"我","permalink":"http://www.chengkangjian.com/tags/我/"}]},{"title":"从零开始学习webpack搭建vue项目(一)","slug":"webpack-note-01","date":"2017-04-16T16:59:17.000Z","updated":"2019-06-13T10:35:19.537Z","comments":true,"path":"2017/04/17/webpack-note-01/","link":"","permalink":"http://www.chengkangjian.com/2017/04/17/webpack-note-01/","excerpt":"","text":"webpack+vue项目实践记录01目的：练习render背景：一直使用vue-cli搭建vue工程，虽然vue全家桶在实际项目中应用的还过得去，以及之前也学习和练习了webpack的用法，但是在实践项目中没有使用太多，而且vue的前端工程化学习到的感觉是空中楼阁，对于未来的工程问题，仅仅使用vue-cli时不能够灵活的进行解决的，于是产生重新开始学习vue结合webpack搭建web工程的想法。 开始新建文件夹 vue-pro在vue-pro下新建文件夹 build在vue-pro下新建文件夹 src在vue-pro目录下执行npm init,初始化package.json在vue-pro目录下执行npm install vue --save-dev,安装vue 在src下新建 index.html main.js App.vue 分别作为实例挂载点、实例挂载入口文件、和vue单页模版根文件在build文件夹下创建dev-server.js 用于配置本地项目的启动文件 初始化这个项目下一步： 安装webpack、并配置，跑起来这个项目安装vue-loader安装webpack，查看版本号为1.14，应升级2.33 npm install -g webpack@2.3.3刚开始执行webpack build/webpack/config.js错误，是没找到webpack.config.js这个文件后来cd build 后执行 webpack webpack.config.js 报错 缺少vue-template-compiler，继续安装此模块缺少css-loader，继续安装此模块 执行webpack webpack.config.js成功 双击index.html 报错You are using the runtime-only build of Vue where the template compiler is not available.找到了一篇文章package.json 中的 main 属性决定了，当项目被引入时，输出的是哪个文件，而 vue 的 package.json 中的 main 指向的是 dist/vue.common.js。 擦，并不太懂是什么鬼，就是把 12// import Vue from &apos;Vue&apos;import Vue from &apos;vue/dist/vue.js&apos; 替换就好了。 但是渲染出来没有内容，我目前猜可能是需要服务器渲染的问题》》》 不是服务器渲染的问题 1234render: h =&gt; h(App)// component: &#123;// App// &#125; 这么替换，就完成了页面的渲染。 问题： 1.为什么在build外执行webpack build/webpack/config.js 报错？ 我发现，entry的入口路径参考的是你执行webpack的当前文件夹， 如果我我在webpack.config.js文件下执行webpack，那么这个时候，配置文件的入口地址，可以被找到，因为webpack的执行目录和配置文件所在目录是一致的，当我到上一层执行webpack构建时，就会出现问题，此时可以将entry的入口文件改为绝对地址就没有问题了。12// entry: &apos;../src/main.js&apos;,entry: path.resolve(__dirname, &apos;../src/main.js&apos;), 但是我执行webpack build/webpack/config.js时还是不行，报错：1234No configuration file found and no entry configured via CLI option.When using the CLI you need to provide at least two arguments: entry and output.A configuration file could be named &apos;webpack.config.js&apos; in the current directory.Use --help to display the CLI options. 当我执行webpack --config build/webpack.config.js --progress就可以成功。 这两者有什么区别呢？ 原来，这和progress没关系，Webpack 在执行的时候，除了在命令行传入参数，还可以通过指定的配置文件来执行。默认情况下，会搜索当前目录的 webpack.config.js 文件，这个文件是一个 node.js 模块，返回一个 json 格式的配置信息对象，或者通过 –config 选项来指定配置文件。 soga！！ 2.import Vue from &#39;Vue&#39; 和 import Vue from &#39;vue/dist/vue.js&#39; 什么区别？ 这个问题还需要从vue的构建方式来看，vue的构建方式有两种独立构建 和运行时构建，其中独立构建= 编译 + 运行时构建， Vue.js 的运行过程实际上包含两步。第一步，编译器将字符串模板（template）编译为渲染函数（render），称之为编译过程；第二步，运行时实际调用编译的渲染函数，称之为运行过程。 vue默认的是运行时构建，如果想使用独立构建需要在webpack配置中加入下面这段： 12345resolve: &#123; alias: &#123; &apos;vue$&apos;: vue/dist/vue.esm.js // &apos;vue/dist/vue.common.js&apos; for webpack 1 &#125;&#125; 但是如何区分运行时构建和独立构建？以及怎么分别实现运行时构建和独立构建？ 至此，如果想使用template写模版，需要使用独立构建，如果使用render函数渲染模版使用运行时构建。 独立构建 12345678import Vue from &apos;vue/dist/vue.js&apos; //独立构建// import Vue from &apos;vue/dist/vue.esm.js&apos; //独立构建import App from &apos;./App.vue&apos;new Vue(&#123; el: &apos;#app&apos;, template: &apos;&lt;App/&gt;&apos;, components: &#123; App &#125;&#125;).$mount(&apos;#app&apos;) 运行时构建 1234567import Vue from &apos;Vue&apos; //运行时构建import App from &apos;./App.vue&apos;new Vue(&#123; el: &apos;#app&apos;, render: h =&gt; h(App)&#125;)","categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"http://www.chengkangjian.com/tags/vue/"},{"name":"webpack","slug":"webpack","permalink":"http://www.chengkangjian.com/tags/webpack/"}]},{"title":"My Girlfriend","slug":"my-girlfriend","date":"2017-04-12T15:14:07.000Z","updated":"2019-06-13T08:32:27.862Z","comments":true,"path":"2017/04/12/my-girlfriend/","link":"","permalink":"http://www.chengkangjian.com/2017/04/12/my-girlfriend/","excerpt":"","text":"这其实是关乎隐私的文章，但是我想记录下来，我希望写下来我的感受，永远的记住它。 说实话，在遇到女朋友之前，我一直都是一个花心的人，但是当我遇到我的女朋友，我变得专一了。这印证了一句话：“抓不住男人的心，就不要说男人花心”(开玩笑)。 女朋友在我心里是全世界最好的女朋友，因为她的存在，我变得更加积极向上、阳光、健康，生活变得更加丰富多彩。 在女朋友心里，我有很多绰号，我能想起来的有：变色龙、盘中餐、大叔、害人精、blue、喵喵、呆萌、萌萌哒、大虫子……等等，当然，更多的时候都是称呼我亲爱的～。 每一个绰号都有故事，都有来源，我们的生活很普通和平凡，但是不单调，因为有她。 我的女朋友有时候也会生气，这个时候，很明显，因为是我做得不够好导致的，作为一名程序员，有时候缺少了制造浪漫，常常以我是简单内向的程序员为借口，但是我的女朋友明知是假的还是将信就信了，去哪找这么“通情达理”的女朋友。 我经常加班，甚至周六也加班，有时候陪他就比较少，女朋友虽然不希望我这么辛苦的加班工作，但是还是很理解我，有时候我挺愧疚的。 有时候晚上回来的十一点了，女朋友做好了水果沙拉，写好了留言条放在桌子上，嘱咐我记得吃，满满的感动，看着她睡着的样子，真想去亲亲她，但又怕打扰她休息-我心里的全世界最好的女朋友。 我有时候会懒惰，但是想想远方的亲人和身边的女朋友，奋斗的动力又十足了。","categories":[],"tags":[{"name":"生活","slug":"生活","permalink":"http://www.chengkangjian.com/tags/生活/"}]},{"title":"记一次敏捷开发Scrum培训及实践的感受","slug":"agile-development-training","date":"2017-03-11T14:24:13.000Z","updated":"2019-06-13T10:25:49.746Z","comments":true,"path":"2017/03/11/agile-development-training/","link":"","permalink":"http://www.chengkangjian.com/2017/03/11/agile-development-training/","excerpt":"","text":"在2016年10月26日，部门请到了亚信的内训师王林皓讲师来给我们BDX的大数据云平台部和数据产品线专门培训敏捷开发Scrum。王老师很早以前就是Scrum Master，带过很多敏捷的团队，在Scrum方面有丰富的经验。 作为自己在这个培训之前，通过工作中的体会和一些资料的阅读，我对敏捷开发也有一点点的认识。知道敏捷开发的敏捷性，小步代跑的过程能够根据不断变化的需求快速响应。 在当天培训中，讲师通过八个章节的内容介绍，中间穿插着一系列的活动作示例，并结合理论的讲解，让我听得受益匪浅，对敏捷开发有了新的认知。 首先，讲师介绍敏捷的五大要素（勇气、开放、承诺、专注、尊重）过程中，自己其实是挺感慨的，自己参与了一年左右的敏捷开发流程，却不知道自己需要以一种怎样的态度来参与敏捷。以上的五大要素中，在自己目前的实践中，自己在勇气和开放方面做的最不好，对于今后，会通过各个击破的方式一项一项整体提高这五大要素的要求。 现在是处于互联网的时代，在这个时代下要求产品的研发要快、准、狠才能跟的上跟得上市场的步伐。敏捷原则和思维刚刚好解释了在这个时代下选择敏捷开发是因为开发需要敏捷这个特性。敏捷不是一个方法论、过程或者框架，敏捷是一种思维。这个思维特性要求自己以一种开放的心态不断的学习和改变来适应周围的变化。 讲师通过一系列的活动实践告诉我们实践敏捷的价值就是优先做最有价值的事，虽然这并不容易做到，这要求参与敏捷的每个人都要拥有共同的价值观，大家齐心协力在一个方向上努力。除非需求的市场前景特别明晰，不然需求价值的大小有时候并不容易统一，这在实践过程中是有挑战的。通过敏捷实践价值这节的学习，要求自己在今后了解自己工作内容的价值，这样应该会让自己更好的开展工作。 通过对scrum的特征、框架、团队方面内容的学习，让我对敏捷开发的认识比较全面。在透明性、跨职能、自组织三个特征中， 目前团队的敏捷实践对这些特征没有明显的体现，可见，我们需要改进的地方还有很多。个人角度来看，需要先从自己的心态上、行为上逐渐的去改变。 讲师在讲解的过程中，也通过提出一个问题引发我们的思考最后解决问题来引起我们的共鸣。有个问题令我印象深刻，“每周计划制定之后，计划外的任务打乱原计划时，计划如何调整？”,因为这个问题目前正在发生，我们的方式是尽量赶计划，实在完成不了计划就会延迟。老师给出”进多少，出多少“的方案是比较客观合理的。 在敏捷开发过程中，有一块内容是我感觉非常困难的，就是敏捷估算。虽然讲师告诉我们不要绝对估算，要使用相对估算的方法，即使这样估算起来还是摸不着头脑。比如在从用户故事进行任务量估算，完全是凭感觉来的，估算的值很不准确，这方面可能随着业务经验的增长会逐渐变好吧。 本次培训是能够引发自己思考的一次培训，因为这和每天的工作息息相关，讲的内容也容易接受。但是理论和实践总是存在着一定的距离。王阳明有句话说：“知之真切笃实处即是行，行之明觉精察处即是知。”，我们下一个目标就是将所学所用付诸于实践，在未来，我们通过点滴的不断的改变不足之处、实践、调整、反思、再实践，团队最终肯定会实现规范的、适合团队的、有效的敏捷开发。","categories":[],"tags":[{"name":"思考","slug":"思考","permalink":"http://www.chengkangjian.com/tags/思考/"},{"name":"敏捷开发","slug":"敏捷开发","permalink":"http://www.chengkangjian.com/tags/敏捷开发/"},{"name":"成长","slug":"成长","permalink":"http://www.chengkangjian.com/tags/成长/"}]},{"title":"回顾老男孩","slug":"dream","date":"2016-09-22T16:55:17.000Z","updated":"2019-06-13T07:04:12.982Z","comments":true,"path":"2016/09/23/dream/","link":"","permalink":"http://www.chengkangjian.com/2016/09/23/dream/","excerpt":"","text":"老男孩是在高二的时候语文老师在全班同学面前播放的一部微电影，当时看的感觉更多是有点意思，没有太多的伤感和感动。今天是大学毕业的第一年，恍然已经六年过去了，今天晚上突然有点怀旧，再次回顾这部微电影，就差稀里糊涂的哭出来了，整个心都酥了，都软了。 现在想来，QQ 空间的说说有一年多没有更新了，我也从曾经的个性张扬，调皮的学生转变为了一名职业人士，开始了自己的职业生活。曾经的老同学不知道会在什么时候突然联系一下，也都有各自的生活了吧，相见不如怀念，让自己更好是现在的最重要的事吧。 审视一下自己的青春，觉得自己的幸运的，犯过无数的错误却总是有改正的机会；经历了老师眼中好学生与坏学生的模样；惹出过很多争议；也曾经失去过自己，又找回了自己；曾经束缚过自己，也在后来找回了自由；身边的朋友有学霸也有学渣；我也算一朵奇葩吧，这一路走来，幸运，感恩！ 我现在也是在从小男孩转变为老男孩的路上，怀揣着自己的梦想，在追求自我实现的路上；生活确实是一把无情的刻刀，改变了我的模样，不变的是依然怀有梦想。","categories":[],"tags":[{"name":"生活","slug":"生活","permalink":"http://www.chengkangjian.com/tags/生活/"}]},{"title":"《互联网时代-再构》观后感","slug":"internet","date":"2016-09-17T14:49:00.000Z","updated":"2019-06-13T07:08:14.028Z","comments":true,"path":"2016/09/17/internet/","link":"","permalink":"http://www.chengkangjian.com/2016/09/17/internet/","excerpt":"","text":"每一次看过视频后都很有启发，这一次也不例外，互联网再构这部视频用了四十分钟全面而详细的向我们阐述了再构的一前一后。 理解再构，顾名思义，再构就是再一次构建，是指互联网时代的到来，其影响不仅仅是局限于科技，局限于技术，局限于社会表面，其对我们的生活的影响是彻底的，巨大的，从菲特台风的案例，黄灯的故事，李明博事件，可汗学院的建立，奥巴马选举的成功等实例都反映了互联网影响的是人与人之间，人与权利之间，人与社会之间，人与人周围的一切关系。 就像视频中说的那样，一就是无限，每一个声音都面对着世界，每一滴水珠都等同于大海。 这要求我们要不断的学习，要与时俱进，顺势而为，在互联网时代的浪潮里构建的新的社会体系中更好的存活。","categories":[],"tags":[{"name":"思考","slug":"思考","permalink":"http://www.chengkangjian.com/tags/思考/"},{"name":"互联网","slug":"互联网","permalink":"http://www.chengkangjian.com/tags/互联网/"}]},{"title":"我应该开始写博客了","slug":"why","date":"2016-09-06T16:02:26.000Z","updated":"2019-06-13T07:19:06.436Z","comments":true,"path":"2016/09/07/why/","link":"","permalink":"http://www.chengkangjian.com/2016/09/07/why/","excerpt":"","text":"记得在大四毕业的前夕，我在知乎上提了一个问题“为什么每次想写东西的时候都无从下笔？”。总结知友的回答，再结合自己的感受，试图剖开内心的世界，认真的拷问自己最本质的想法，自问为什么写不出来，也许六耳的回答是自己的那个样子，之所以写不出来，不是真的写不出来，而是害怕写不出好的内容，害怕比较，害怕没人看，害怕写出来的东西被别人讥讽，被别人指指点点，再加上自己是一个好面的人，在那么多外在情绪的干扰下，写不出来是很正常的了。 大四毕业了，现在的我已经正式走上了谋生的道路，正式结束了十几年的学生身份，体会到了谋生的艰辛，生活的压力，身上的责任感。自己意外的成为了一个前端开发者，自然而然的就想为自己搭建一个博客用于记录自己的生活，记录自己的技术积淀，分享自己的生活感悟，分享自己的技术，分享自己的想法，因为互联网时代的本质就是分享，我也鼓励自己要克服害怕写东西，从这种消极情绪中积极的走出来，人生不也就是因为有了奋斗和与自己搏击的过程而显得刺激而有意义吗？ 我还希望通过在写博客的过程中，思考自己的生活，尽量站在客观的角度重新认识自己，进一步了解自己。我也搜索了相关为什么要写博客的文章，如“为什么你要写博客？”借鉴他们的想法之后愈加觉得自己开始做出这个选择的正确性，我要求自己要学习写作，记录想法的同时，要善于总结分享。","categories":[],"tags":[{"name":"生活","slug":"生活","permalink":"http://www.chengkangjian.com/tags/生活/"},{"name":"感悟","slug":"感悟","permalink":"http://www.chengkangjian.com/tags/感悟/"}]},{"title":"新地盘 新生活 新开始.","slug":"start","date":"2016-09-03T16:19:47.000Z","updated":"2019-03-20T15:06:48.044Z","comments":true,"path":"2016/09/04/start/","link":"","permalink":"http://www.chengkangjian.com/2016/09/04/start/","excerpt":"","text":"通过hexo搭建的一个博客，虽然很简单，也是用了很长的时间，经过自己的双手敲出来的东西，可能简单了些，但是很有成就感。嗯，这是一个开始！add oil!","categories":[],"tags":[{"name":"生活","slug":"生活","permalink":"http://www.chengkangjian.com/tags/生活/"},{"name":"感悟","slug":"感悟","permalink":"http://www.chengkangjian.com/tags/感悟/"}]}]}