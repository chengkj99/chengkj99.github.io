{"meta":{"title":"程是非sky","subtitle":"不要因为走得太远，忘了我们为什么出发...","description":"一边奔跑 一边思考","author":"程康健","url":"http://yoursite.com"},"pages":[{"title":"关于 程是非sky","date":"2016-09-04T05:24:18.000Z","updated":"2017-02-13T09:46:14.000Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"欢迎您来到这里，就像行星撞地球一样的几率让你看到我，让我看到你！ 姓名：程康健 互联网ID：程是非sky 现居：北京 职业：Web前端开发 爱好：足球 音乐 欢迎朋友来信交流（wechat：kangjian51211)"},{"title":"归档","date":"2017-02-14T10:12:09.000Z","updated":"2017-02-14T10:12:09.000Z","comments":true,"path":"archive/index.html","permalink":"http://yoursite.com/archive/index.html","excerpt":"","text":""},{"title":"categories","date":"2016-09-04T05:20:57.000Z","updated":"2017-02-05T07:24:26.000Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2016-09-04T05:18:59.000Z","updated":"2017-02-05T07:24:26.000Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"javascript安全类型监测","slug":"javascript安全类型监测","date":"2017-02-13T08:41:27.000Z","updated":"2017-03-06T07:43:38.000Z","comments":true,"path":"2017/02/13/javascript安全类型监测/","link":"","permalink":"http://yoursite.com/2017/02/13/javascript安全类型监测/","excerpt":"","text":"数据类型检测ECMAScript有五种简单的数据类型，分别为Undefined、Null、String、Number、Boolean，还有一个复杂的数据类型Object。ECMAScript的语言的动态性意味着我们可以使用以上6种数据类型表示任何数据。 因为数据类型是松散的，所以我们需要一些手段来准确的检测给定变量的数据类型。 typeoftepeof是检测基本数据类型的好手，他有六种检测结果，分别是Undefined、Object、Function、String、Number、Boolean,所以它是判断一个变量是：未定义值、对象、函数、字符串、数值、布尔值的最佳工具。123456789typeof undefined //&quot;undefined&quot;typeof &#123;&#125; //&quot;object&quot;typeof function()&#123;&#125; //&quot;function&quot;typeof &apos;&apos; //&quot;string&quot;typeof 1 //&quot;number&quot;typeof true //&quot;boolean&quot;typeof null //&quot;object&quot;typeof [] //&quot;object&quot; 从上面可以看出typeof虽然是检测基本数据类型的好手，但是在检测引用类型的数据时就力不从心了，下面会提到如何检测引用数据类型。另外还有个问题值得思考： 为什么null的检测类型是Object？ 看书中对null的描述： The value null represents the intentional absence of any objectvalue 首先，null是一个原始值。关于 typeof null //&quot;object&quot; 的结果，从一开始出现JavaScript就是这样的。 在 JavaScript 最初的实现中，JavaScript 中的值是由一个表示类型的标签和实际数据值表示的。对象的类型标签是0。由于 null 代表的是空指针(大多数平台下值为0x00)，因此，null的类型标签也成为了0，typeof null就错误的返回了”object”.(referenc) 据说该问题在ECMAScript 6中提出typeof null === &#39;null&#39;的讨论 (该提议已被否决)。 安全类型检测javascript内置的类型检测机制并非完全可靠。比如typeof操作符，由于一些无法预知的行为，会得到不靠谱的结果。instanceof存在于多个作用域的情况，通过下面的方式检测数组： var isArray = value instanceof Array 以上代码若返回true，value必须是一个数组，而且必须与Array构造函数处于同一个作用域中。如果value是别的框架定义的数组，以上的代码又可能会返回false。 如何解决上述问题上述解决的办法都一样，在任何值上调用Object原生的toString方法时，都会返回一个类似于［object NativeConstructorName］格式的字符串，比如： Object.prototype.toString.call([&#39;&#39;]) //&quot;[object Array]&quot; 由于原生数组的构造函数名和全局作用域无关，因此使用toString就能返回一致的值。利用这点可以创建以下函数： 123456789101112131415function isArray(value) &#123; return Object.prototype.toString.call(value) == &quot;[object Array]&quot;;&#125;function isFunction(value) &#123; return Object.prototype.toString.call(value) == &quot;[object Function]&quot;;&#125;function isRegExp(value) &#123; return Object.prototype.toString.call(value) == &quot;[object RegExp]&quot;;&#125;function isNativeJSON(value) &#123; return window.JSON&amp;&amp;Object.prototype.toString.call(value) == &quot;[object JSON]&quot;;&#125; ⚠需要注意的一点是，Object.prototype.toString()本身也会被修改，本文讨论的仅仅是该方法未被修改的情况下。","categories":[],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://yoursite.com/tags/javascript/"}]},{"title":"解决 git bash 不重复输入账号密码","slug":"git-not-repeat-put-password","date":"2016-10-19T05:06:40.000Z","updated":"2017-03-06T07:52:41.000Z","comments":true,"path":"2016/10/19/git-not-repeat-put-password/","link":"","permalink":"http://yoursite.com/2016/10/19/git-not-repeat-put-password/","excerpt":"","text":"1 寻找并编辑 .git-credentials 文件在%HOME%目录中，一般为C:\\users\\Administrator，也可以是你自己创建的系统用户名目录，反正都在C:\\users\\中。文件名为.git-credentials,由于在Window中不允许直接创建以”.”开头的文件，所以需要借助git bash进行，打开git bash客户端，进行%HOME%目录，然后用touch创建文件 .git-credentials, 用vim编辑此文件，输入内容格式： 12345touch .git-credentialsvim .git-credentialshttps://&#123;username&#125;:&#123;password&#125;@github.com 2 添加Git Config 内容进入git bash终端， 输入如下命令： git config --global credential.helper store 执行完后查看%HOME%目录下的.gitconfig文件，会多了一项： 12[credential]helper = store 重新开启git bash会发现git push时不用再输入用户名和密码","categories":[],"tags":[{"name":"git","slug":"git","permalink":"http://yoursite.com/tags/git/"}]},{"title":"互联网时代-值得思考的话","slug":"internet-collect","date":"2016-09-26T14:54:01.000Z","updated":"2017-03-06T07:52:22.000Z","comments":true,"path":"2016/09/26/internet-collect/","link":"","permalink":"http://yoursite.com/2016/09/26/internet-collect/","excerpt":"","text":"人类社会从来不缺少善良的愿望，只不过在过去漫长的岁月，难以因为具体的动机而汇聚。 当信息突破了时间和空间的阻隔，它所携带的信息的能量，就能够具有这样一种非常神奇的力量，可以凝聚共识啊，可以焕发情感啊，能够形成一种强大的社会动员力量。 网络技术导致沟通出现彻底的转变，每个人可以与谁沟通也有所变化。因此，沟通的转变和对网络的需求共同创造了一种新的社会结构。 互联网产生了互相感召的力量。将无数同样拥有关怀之情的人形成了强大的自组织力量，是一种充分可持续的力量。人类以一种全新的组织、连接方式化合出无数钻石般的群体行动。 群体具备个人所不具备的性质，而究其原因，则在于我们组织个体的方式，使得群体优于个体。想一想碳元素，把碳原子以某种方式连接，你将得到铅笔中软而黑的石墨。如果以另一种方式连接碳原子，则将得到坚硬而清澈的钻石。 这种汇聚了的善的能量，是新时代赋予整个人类的一份财富。所有的信息都能以我们看不见的面貌，以我们经验不能体验的速度，创造出前所未有的时代动力。 我们都有梦想、希望和想象。然而没有人教我们如何做梦，我们只是行动起来，但是如果没有教育，凭梦想这些女孩只能走这么远。 埃文斯萌生这个看似遥不可及的梦想，不是因为他出身、教育、钱财、智商，而是因为他出生在互联网时代。 在过去的历史上，人类以金字塔的形式把所有人的善意汇聚起来，形成特定的组织实施救助。互联网时代，人们可以以地球为平台，以人类为范围，每一个人都有可能获得与过去世界级慈善组织相媲美的道德力量。 只要有共同意愿，无限的碎片就瞬间产生效能，产生让整个人类自我敬仰的力量，人类互相鼓舞创造美好人生的念头，在互联网时代，变得像投下一枚硬币那么简单。 人类社会的公共组织在它运行过程中，有自身繁育的充沛动力，各个层级不光会追逐层级的独特利益，而且还会膨胀层级本身。—帕金森定律。 现在淡水湖中的三文鱼是由内务部负责管理的，但是如果鱼游进了海水中，就归商务部管了；要是这些鱼被熏制好了，事情恐怕就更复杂了。 在曾经的漫长岁月，人类社会结构的层层叠叠中，大量的信息既在损耗也被扭曲，互联网穿透了社会坚厚的岩层，使所有相邻或相距遥远的层级，彼此面对。身份、财富、地域，都不再是传播的权利或枷锁。每个人的传播能量已经穿破层级壁垒，开始顶层和底层的直接交流。 在水平网络中，人们可以相连、分离、相聚、分散，整个社会和政治组织的形式都在变化。我们曾经谈论过后工业社会，“后”意味着我们并不明白。 人类社会一经诞生，就有金字塔一般由层级堆垒起来的醒目中心。在互联网时代，金字塔塔顶上的那块石头，已经可以轻松触摸它基座最深处的那一粒岩石，无论在哪一个位置上一块石头，都拥有了新时代的上帝之手。 微信，五亿；新浪微博，五亿；QQ，八亿；脸谱，十二亿。这些惊人的不断成长的数字田野里，瞬间崛起的不是数字，而是数字背后的声音和人 互联网实际上是把人与人联结在一起了，另外一个是把人与信息联结在一起了。因为这两个联结实际上大大提升了我们讲的那个信息的一个传播的效率，创造了效率。 工业时代，通过组织的方式和公约的形式，形成公共意志。公约形式就意味着注定有一小部分社会成员被公共意志所忽略，他们捍卫被忽略的权利的组织意愿，始终存在着。 不断被忽略的力量组织起来，构造成了公共组织形态和社会自组织形态的有机体。人们就生活在这样一个组织常态中。互联网时代，传统常态的经验和结构已不能容纳互联网组织起来的社会能量。信息传播技术，创造了绝对的少数也不能被忽略的可能。每一个声音都面对着世界，每一滴水珠都等同于大海。 人人都有自己的声音，即使你是矮穷挫，委身于地下室，香蕉皮等垃圾盖满地板，你却和那些坐在游泳池里的高富帅有着同样的声音。只要你能上得了网。 互联网让那些以前没有发言权的人发声，但是你怎么知道，你怎么知道那些声音是仇恨的声音还是团结协作的声音，是敌对的声音还是进步的声音？所以不能简单地由科技联想到价值。 曾经孕育了互联网的教育制度，受到网络本身组织能量的冲击，整个世界会变成一个没有边界的学校吗？理论上，一门课程，将来在世界上只需要一个老师，一等于无限，地球上的每个人都享有平等的受教育的权利。那将是矗立了四千五百年的金字塔，能够目睹的这个星球上最动人的一幕。每一个人都可以站在大地，分享这个世界，并触摸天空。 当人类的精神成长过程被重组，与奇观相伴而来的是所有拥有母校的人们是否都可能产生让我们精神紧张的感念。那个因为远离世俗功利，因此总是储存着我们美好回忆的地方；那个因为身在成长中的朦胧，因此总是友情似水又不由分说地规定了我们生命的节律的地方；那些曾经属于每一个人幼儿园里的青梅竹马，属于每个人小学、中学的两小无猜，属于每一个人大学校园里林荫树下的恋情又将会在哪里？","categories":[],"tags":[{"name":"互联网 思考","slug":"互联网-思考","permalink":"http://yoursite.com/tags/互联网-思考/"}]},{"title":"回顾老男孩","slug":"dream","date":"2016-09-22T16:55:17.000Z","updated":"2017-03-06T07:55:04.000Z","comments":true,"path":"2016/09/23/dream/","link":"","permalink":"http://yoursite.com/2016/09/23/dream/","excerpt":"","text":"老男孩是在高二的时候语文老师在全班同学面前播放的一部微电影，当时看的感觉更多是有点意思，没有太多的伤感和感动。今天是大学毕业的第一年，恍然已经六年过去了，今天晚上突然有点怀旧，再次回顾这部微电影，就差稀里糊涂的哭出来了，整个心都酥了，都软了。现在想来，QQ空间的说说有一年多没有更新了，我也从曾经的个性张扬，调皮的学生转变为了一名职业人士，开始了自己的职业生活。曾经的老同学不知道会在什么时候突然联系一下，也都有各自的生活了吧，相见不如怀念，让自己更好是现在的最重要的事吧。审视一下自己的青春，觉得自己的幸运的，犯过无数的错误却总是有改正的机会；经历了老师眼中好学生与坏学生的模样；惹出过很多争议；也曾经失去过自己，又找回了自己；曾经束缚过自己，也在后来找回了自由；身边的朋友有学霸也有学渣；我也算一朵奇葩吧，这一路走来，幸运，感恩！我现在也是在从小男孩转变为老男孩的路上，怀揣着自己的梦想，在追求自我实现的路上；生活确实是一把无情的刻刀，改变了我的模样，不变的是和经典一样的梦想。","categories":[],"tags":[{"name":"生活","slug":"生活","permalink":"http://yoursite.com/tags/生活/"}]},{"title":"互联网时代-再构观后感","slug":"internet","date":"2016-09-17T14:49:00.000Z","updated":"2017-03-06T07:45:13.000Z","comments":true,"path":"2016/09/17/internet/","link":"","permalink":"http://yoursite.com/2016/09/17/internet/","excerpt":"","text":"每一次看过视频后都很有启发，这一次也不例外，互联网再构这部视频用了四十分钟全面而详细的向我们阐述了再构的一前一后，怎么理解再构，顾名思义，再构就是再一次构建，是指互联网时代的到来，其影响不仅仅是局限于科技，局限于技术，局限于社会表面，其对我们的生活的影响是彻底的，巨大的，从菲特台风的案例，黄灯的故事，李明博事件，可汗学院的建立，奥巴马选举的成功等实例都反映了互联网影响的是人与人之间，人与权利之间，人与社会之间，人与人周围的一切关系。就像视频中说的那样，一就是无限，每一个声音都面对着世界，每一滴水珠都等同于大海。 ，这要求我们要不断的学习，要与时俱进，顺势而为，在互联网时代的浪潮里构建的新的社会体系中更好的存活。","categories":[],"tags":[{"name":"互联网 思考","slug":"互联网-思考","permalink":"http://yoursite.com/tags/互联网-思考/"}]},{"title":"javascript高级编程-Array引用类型用法总结","slug":"javascriptArray","date":"2016-09-16T16:56:47.000Z","updated":"2017-03-06T07:44:33.000Z","comments":true,"path":"2016/09/17/javascriptArray/","link":"","permalink":"http://yoursite.com/2016/09/17/javascriptArray/","excerpt":"","text":"引用类型-Array类型引用类型是一种数据结构，用于将数据和功能联系起来。 创建对象的方式： 1.new操作符 var array=new Array(); 2.字面量表示法创建 var array=[]; Array 检测数组:检测数组是基本类型还是引用类型 转换方法:将数组转换成字符串或数组对象 栈方法:后进先出的操作数组的方法 队列方法:先进先出的操作数组的方法 操作方法:数组的拼接、截取、插入、删除、替换 位置方法:查找数组项、返回索引值 迭代方法:对每个数组项进行操作的方法 缩小方法:操作数组的每一项，构建最终的返回值 1 检测数组 检测数组的方法；instanceof操作符的问题是当开发环境引入多个框架存在多个全局环境的时候，会出现不同的Array构造函数，进而出现不同的结果。Array.isArray()这个方法很好的解决了这个问题。 arrName instanceof Array var array=[1,2,3]; console.log(array instanceof Array) //true Array.isArray(arrName) console.log(Array.isArray(array)) //true 2 转换方法 toString()：返回以逗号分隔拼接而成的字符串 valueOf()：返回对象 toLocaleString()：区别很小，如果是数组调用这个方法，那么数组的每一项都会调用这个方法 alert(value)==alert(value.toString()) var array=[1,2,3]; var arrayToString=array.toString(); var arrayValueOf=array.valueOf(); var arrayToLocalString=array.toLocaleString(); console.log(arrayToString);// 1,2,3 console.log(arrayValueOf);//[1, 2, 3] console.log(arrayToLocalString);//1,2,3 3 栈方法 (LIFO:last in first out) ES数组类似于数据结构的方法栈是一种限制插入和删除项的数据结构 push()：接收任意数量的参数添加至数组尾部，返回数组长度值 pop():从数组末尾移除最后一项，减少数组的length值，返回该数组被删除的最后一项 4 队列方法 (FIFO:first in first out) 结合push()和shift()方法可以实现像队列一样使用数组使用unshift()和pop()可以从相反的方向模拟队列 shift()移除并返回该数组的第一项； unshift()从数组前端添加任意个参数，并返回新数组的长度 5 操作方法 concat()复制原数组连接新数组形成新副本； var arr1=[&apos;q&apos;,&apos;w&apos;,&apos;e&apos;]; var arr2=[&apos;h&apos;,&apos;u&apos;,&apos;o&apos;]; document.write(arr1.concat(arr2)); //q,w,e,h,u,o slice() 有一个参数时，复制参数为起始位置到末尾的副本；有两个参数时，复制两个数字中间部分的数组项；如果参数是负数，复制用数组的长度加上负数值得到的两个参数之间的数组项； var arr3=[&apos;h&apos;,&apos;e&apos;,&apos;l&apos;,&apos;l&apos;,&apos;o&apos;]; console.log(arr3.slice(1));//e,l,l,o console.log(arr3.slice(-4));//e,l,l,o arr3.slice(-4)===arr3.slice(1);//true splice() 三个参数:分别对应起始位置，删除项的个数，替换项;通过对这三个参数的合理运用可以实现删除、插入、替换等操作。 //从第一项开始删除两项 var splice_arr1=[&apos;h&apos;,&apos;e&apos;,&apos;l&apos;,&apos;l&apos;,&apos;o&apos;]; console.log(splice_arr1.splice(1,2))//返回的是被删除的项组成的数组[&quot;e&quot;, &quot;l&quot;] //从第二项后插入三项old var splice_arr2=[&apos;h&apos;,&apos;e&apos;,&apos;l&apos;,&apos;l&apos;,&apos;o&apos;]; var removed=splice_arr2.splice(2,0,&quot;K&quot;,&quot;K&quot;); console.log(splice_arr2);//[&quot;h&quot;, &quot;e&quot;, &quot;K&quot;, &quot;K&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot;] console.log(removed)//返回的是一个空数组 //替换 var removed=splice_arr3.splice(2,2,&quot;P&quot;,&quot;P&quot;); console.log(splice_arr3);//[&quot;h&quot;, &quot;e&quot;, &quot;P&quot;, &quot;P&quot;, &quot;o&quot;] console.log(removed)//返回的是被替换的值[&quot;l&quot;, &quot;l&quot;] 6 位置方法 返回索引值 indexOf() 从前往后找 lastIndexOf() 从后往前找 // indexOf() 从前往后找 // lastIndexOf() 从后往前找 var index_arr=[&apos;h&apos;,&apos;e&apos;,&apos;l&apos;,&apos;l&apos;,&apos;o&apos;]; var indexOf_arr=index_arr.indexOf(&apos;l&apos;); console.log(&apos;原数组:&apos;,index_arr)//原数组不变 console.log(&apos;返回值:&apos;,indexOf_arr)//返回值是第一个查到位置的索引值2 var index_arr2=[&apos;h&apos;,&apos;e&apos;,&apos;l&apos;,&apos;l&apos;,&apos;o&apos;]; var indexOf_arr2=index_arr2.lastIndexOf(&apos;l&apos;); console.log(&apos;原数组:&apos;,index_arr2)//原数组不变 console.log(&apos;返回值:&apos;,indexOf_arr2)//返回值是第一个查到位置的索引值3 7 迭代方法 接收两个参数，一个是函数，另一个是运行该函数的作用域对象。 第一个参数函数接收三个参数 数组项的值 item，值的位置 idnex ，数组本身 array every() //都是返回true则返回true var numbers=[1,2,3,4,5,6,7,8,9,0,9,8,7,65,5,4,33,21,1,1,23,3,4]; var everyArr=numbers.every(function(it, index ,arr){ if(it&gt;9){ return true; } }) console.log(everyArr);///false some()//有一个返回true，则返回true var someArr=numbers.some(function(it, index ,arr){ return (it &gt; 9) ; }) console.log(someArr);///true forEach()//没有返回值 var numbers=[1,2,3,4,5,6,7,8,9,0,9,8,7,65,5,4,33,21,1,1,23,3,4]; var forEachArr=numbers.forEach(function(it, index ,arr){ var it=it*100; console.log(it) }) //无返回值 filter()//返回该函数会返回true的项组成的数组，用于过滤 var numbers=[1,2,3,4,5,6,7,8,9,0,9,8,7,65,5,4,33,21,1,1,23,3,4]; var filterArr=numbers.filter(function(it, index ,arr){ if(it&gt;10){ return it; } }) console.log(filterArr);//[65, 33, 21, 23] //返回返回值组成的新数组 map()//返回每个函数的返回值 var numbers=[1,2,3,4,5,6,7,8,9,0,9,8,7,65,5,4,33,21,1,1,23,3,4]; var mapArray=numbers.map(function(it, index ,arr){ var it=it*100; return it; }) console.log(mapArray) //[100, 200, 300, 400, 500, 600, 700, 800, 900, 0, 900, 800, 700, 6500, 500, 400, 3300, 2100, 100, 100, 2300, 300, 400] //返回返回值组成的新数组 8 缩小方法 reduce() var numbers=[1,2,3,4,5,6,7,8,9,0,9,8,7,65,5,4,33,21,1,1,23,3,4]; var allArray=numbers.reduce(function(prev,cur,index,arr){ return (prev+cur); }) console.log(allArray);//229 reduceRight() var numbers=[1,2,3,4,5,6,7,8,9,0,9,8,7,65,5,4,33,21,1,1,23,3,4]; var allArrayRight=numbers.reduceRight(function(prev,cur,index,arr){ return (prev+cur); }) console.log(allArrayRight);//229 总结：经过这次总结和练习，觉得自己在以后再次遇到操作数组应该不会再感到害怕了；自己的工作中用的最多的是split()这个字符串截取的操作方法，这个方法虽然是字符串的方法但是很好用。这种总结方式，效果挺好，就是效率稍微低一点，这点咋解决啊，是个问题。。。","categories":[],"tags":[{"name":"javascript 数组","slug":"javascript-数组","permalink":"http://yoursite.com/tags/javascript-数组/"}]},{"title":"我应该开始写博客了","slug":"why","date":"2016-09-06T16:02:26.000Z","updated":"2017-03-06T07:51:25.000Z","comments":true,"path":"2016/09/07/why/","link":"","permalink":"http://yoursite.com/2016/09/07/why/","excerpt":"","text":"记得在大四毕业的前夕，我在知乎上提了一个问题“为什么每次想写东西的时候都无从下笔？”。总结知友的回答，再结合自己的感受，试图剖开内心的世界，认真的拷问自己最本质的想法，自问为什么写不出来，也许六耳的回答是自己的那个样子，之所以写不出来，不是真的写不出来，而是害怕写不出好的内容，害怕比较，害怕没人看，害怕写出来的东西被别人讥讽，被别人指指点点，再加上自己是一个好面的人，在那么多外在情绪的干扰下，写不出来是很正常的了。 大四毕业了，现在的我已经正式走上了谋生的道路，正式结束了十几年的学生身份，体会到了谋生的艰辛，生活的压力，身上的责任感。自己意外的成为了一个前端开发者，自然而然的就想为自己搭建一个博客用于记录自己的生活，记录自己的技术积淀，分享自己的生活感悟，分享自己的技术，分享自己的想法，因为互联网时代的本质就是分享，我也鼓励自己要克服害怕写东西，从这种消极情绪中积极的走出来，人生不也就是因为有了奋斗和与自己搏击的过程而显得刺激而有意义吗？ 我还希望通过在写博客的过程中，思考自己的生活，尽量站在客观的角度重新认识自己，进一步了解自己。我也搜索了相关为什么要写博客的文章，如“为什么你要写博客？”借鉴他们的想法之后愈加觉得自己开始做出这个选择的正确性，我要求自己要写下去，我想让尽量多的人知道，一个叫程康建小伙子曾经来过这个世界，这个世界有他的足迹。然后当我有朝一日老的时候，如果能够阅读自己年轻时候的心态，何尝不是一件幸福的事情。 写吧！再次告诉自己！写到天荒地老海枯石烂…add oil！","categories":[],"tags":[{"name":"生活 感悟","slug":"生活-感悟","permalink":"http://yoursite.com/tags/生活-感悟/"}]},{"title":"新地盘 新生活 新开始.","slug":"start","date":"2016-09-03T16:19:47.000Z","updated":"2017-03-06T07:48:31.000Z","comments":true,"path":"2016/09/04/start/","link":"","permalink":"http://yoursite.com/2016/09/04/start/","excerpt":"","text":"通过hexo搭建的一个博客，虽然很简单，也是用了很长的时间，经过自己的双手敲出来的东西，可能简单了些，但是很有成就感。嗯，这是一个开始！add oil!","categories":[],"tags":[{"name":"生活 感悟","slug":"生活-感悟","permalink":"http://yoursite.com/tags/生活-感悟/"}]}]}